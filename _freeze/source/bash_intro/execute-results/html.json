{
  "hash": "c41b0a76db01735c83a2398a22b0e12b",
  "result": {
    "markdown": "---\ncode-block-bg: true\ncode-block-border-left: \"#31BAE9\"\nexecute:\n  eval: false\nengine: knitr\nbibliography: references.bib\n---\n\n\n<div style=\"text-align: justify\">\n\n# Introduction to Bash\n\n## `pwd`: Finding out where we are\n\nAfter installing the terminal, let's orient ourselves by typing our first command, `pwd`, into the terminal and pressing enter. `pwd` prints the location of the current working directory and basically tells you where exactly you are. \n\nWhen we login we start from what is called our home directory.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd\n```\n:::\n\n\n::: {.callout-tip title=\"Tip: finding the desktop on different user systems\" collapse=true}\n\nYour home directory will be something like /Users/YourUserName but might be slightly different depending on your operating system. Below you find some help to orient yourself better for different terminal interfaces:\n\nFor MAC users:  \n\n- The home directory should be `/Users/YourUserName`\n- To access the current folder in Finder you can try using `open .`\n- Your desktop should be here `/Users/YourUserName/Desktop`\n\nFor Mobaxterm users:  \n\n- Your home directory is `/home/mobaxterm`\n- By default this home directory is in the Temp folder, which gets deleted evertime you exit Mobaxterm, To give this a persistent home, do the following:\n  - Settings --> Configuration --> General \n  - In there set Persistent home directory to a folder of your choice\n-  To access the file explorer and get used to where you are you can type `explorer.exe .`\n-  The path to the desktop would be something like this `/mnt/c/Users/YourUserName/OneDrive/Desktop` or `/mnt/c/Users/YourUserName/Desktop`\n\nFor WSL2 users:  \n\n-  The home directory is `/home/YourUserName`\n-  To access the file explorer and get used to where you are you can type `explorer.exe .`\n-  You see that the Ubuntu environment is launched separated from your Windows environment\n-  The path to the desktop would be something like this `/mnt/c/Users/YourUserName/OneDrive/Desktop` or `/mnt/c/Users/YourUserName/Desktop`\n:::\n\n## `ls`: List the content of a directory \n\nNow that we know where we are, let's see how to move around by first seeing what files and folders exist in our home directory. For this we can use the `ls` command, which stands for list directory contents:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n```\n:::\n\n\nIn my case this returns something like this:\n\n<p align=\"left\">\n<img src=\"../img/ls.png\" width=\"500\"/>\n</p>\n\nThis might look a bit different for your system in terms of color for file/folder names but what we basically see are the files (in bold text) and folders (green-highlighted text).\n\n\n## The structure of a command\n\nSince this can easily become over-whelming if we deal with a lot of files and folders, lets look a bit closer into how we can optimize our commands.\n\nLetÂ´s start with looking at the general structure of a command:\n\n<p align=\"left\">\n<img src=\"../img/unix_command.png\" width=\"500\"/>\n</p>\n\n\nNow, let's look a bit closer into the `ls` command and use it with an option `-l`, an option we can use that makes ls use a long listing format.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -l\n```\n:::\n\n\nAfter running this, we should see our files and folders but in what is called the long format (which gives more detailed information and structures our output a bit better):\n\n<p align=\"left\">\n<img src=\"../img/ls2.png\" width=\"500\"/>\n</p>\n\n\nIf you are unsure what options come with a program its always a good idea to check out the manual. You can do this with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nman ls\n```\n:::\n\n\nYou can exit the manual by pressing `q`.\n\nIn case you want to check what a program does or what options there are, depending on the program there might be different ways how to do this. These most common ways are:\n\n-   `man ls`\n-   `ls --help`\n-   `ls -h`\n\n\n## `cd`: Moving around folders\n\nMost of the time you do not want to perform your analyses in the home directory but elsewhere. We can use the `cd` command to move around the file system. \n\nThe Unix file system is a hierarchical file system to organize files and directories. It is a tree-like structure that starts with a single directory called the root directory, which is denoted by a forward slash (/) character. All other files are \"descendants\" of root. To move from the root, we can go via the descendants to reach the john folder as follows: `/users/john`\n\n<p align=\"center\">\n<img src=\"../img/filesystem.png\" width=\"500\"/>\n</p>\n\nFor our analyses, we will move into any of the folders that we see listed after we have used `ls -l`. In my case I want to move into the source directory:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd source/\n```\n:::\n\n\nIf you use `pwd` afterwards, then you should see that we moved into another directory. \n\nWe can also move back to our original directory using `cd ..`, which will move the user up one directory (and move us out of the source and back into the home directory). \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ..\n```\n:::\n\n\nWe can also move around multiple levels. In the example below, I am going into the source folder, then back to the home directory and then into the docs folder. \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd source/../docs\n```\n:::\n\n\nAnother useful way to move around quickly is using the tilde symbol, i.e. `~`, which can be used as a shortcut to move directly into our home directory:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ~\n```\n:::\n\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\nExplore your current location with `pwd` and `ls` and move around with `cd` and try to get used to these three commands. If you are more comfortable, try finding your Deskop based on the tips in the section introducing `pwd`\n:::\n\n\n## `mkdir`: Making new folders\n\nNow that we know how to explore our surroundings, let us make a new folder in which we start our data analysios. For this we use the `mkdir` command.\n\nTo do this, we will first move into our home directory and create a new folder and move into that folder as follows:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#go into the folder from which you want to work (i.e. the home directory)\ncd ~\n\n#make a new folder (in the directory we currently are in, name it new_older)\nmkdir data_analysis\n\n#check if new folder was generated\nls\n\n#next we move into the newly generated folder\ncd data_analysis\n\n#check if we correctly changed our location\npwd\n```\n:::\n\n\n::: {.callout-tip title=\"Tip: Command-line completion\" collapse=true}\n\nMost command-line interpreters allow to automatically fill in partially typed commands, file paths or file names. \n\nSo instead having to type out `data_analysis` completely when changing the directory, we can let the interpreter do the work for us.\n\nTo do this, start from the data_analysis folder and type `cd data_` and press the Tab-key on your keyboard. The cli should have auto-completed the folder name automatically. \n\nIf there are multiple options, such as data and data_analysis, the cli can not autocomplete the folder name, however, by pressing Tab twice you will see all options to extend the name.\n\n:::\n\n\n## `wget`: Downloading data\n\nNext, let's download our sequencing data into a new `data` folder. One way to do this is using the `wget`. In the command below we add the option  `-P` to specify where to download the data:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#make a folder for our downloads\nmkdir data\n\n#download a genome from ncbi using wget\nwget -P data https://github.com/ndombrowski/cli_workshop/raw/main/data/seq_project.tar.gz\n```\n:::\n\n\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\n1. Check with `ls` if the file was downloaded correctly\n2. Check the manual if there are extra options that we can use for `ls` to check the file size (advanced)\n\n<details>\n    <summary>Click me to see an answer</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#check if file was downloaded\nls -l data/\n\n#check file size\nls -lh data/seq_project.tar.gz\n```\n:::\n\n\n</details>\n\n:::\n\n\n## `tar`: Working with tar files\n\nThe data we downloaded is provided as a tar file:\n\n-   tar is short for Tape Archive, and sometimes referred to as tarball\n-   The TAR file format is common in Unix and Unix-like systems when storing data\n-   TAR files are often compressed after being created and then become TGZ files, using the tgz, tar.gz, or gz extension.\n\nWe can decompress the data into our data folder as follows:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntar -xvf data/seq_project.tar.gz -C data\n```\n:::\n\n\nThe options we use are:\n\n- `x` tells it to extract files from the archive\n- `v` display verbose information and provide detailed information while creating the tarball\n- `f` specify the file name\n- `C` tells tar to change directory (so the package content will be unpacked there)\n\n\n::: {.callout-tip title=\"Tip: how to generate a tarball\" collapse=true}\n\nIf you ever want to generate a tarball you can do the following:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntar -cvzf my_tarball.tar.gz folder_to_tar\n```\n:::\n\n\nThe options we use are:\n\n- `c` create an archive by bundeling files and directories together\n- `z` use gzip compression when generating the tar file\n\n:::\n\n\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\n1. After extracting the tarball use `ls` to explore the content we just downloaded\n2. Find the path to reach at least one sequence file. Hint, to make your life easier, check the `Tip: Command-line completion` above.\n\n<details>\n    <summary>Click me to see an answer</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#check the content of the dowloaded folder\nls -l data/seq_project\n\n#find a sequence file\nls -l data/seq_project/barcode001_User1_ITS_1_L001/\n```\n:::\n\n\n</details>\n\n:::\n\n\n## Wildcards\n\nAfter exploring our folder, we have seen that `data/seq_project` contains 4 folders, 2 folders for different users who each generated two replicates.\n\nHowever, you might have also noticed that it gets tedious to figure out how many files are in each folder because we would need to run `ls` on each single folder and view its content individually.\n\nLuckily, the shell provides special characters to help you rapidly specify groups of filenames. **Wild-cards** are characters can be used as a substitute for any class of characters in a search.\n\nThe `*` wildcard is the wildcard with the broadest meaning of any of the wildcards, it can represent 0 characters, all single characters or any string of characters. I.e. we can list all files in our folders as follows:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#list all files in every single folder that is found in seq_project\nls data/seq_project/*/\n```\n:::\n\n\nSince we see that the sequencing files all end with `.fastq.gz` we can make this command a bit more specific and at the same time make the output a bit more readable:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#list all files in every single folder that is found in seq_project\nls data/seq_project/*/*.gz\n```\n:::\n\n\nNow we can easily see for each folder how many files we have.\n\n\n::: {.callout-tip title=\"Tip: More wildcards\" collapse=true}\n\n`*` is not the only wildcard we can use and a full list can be found [here](https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm).\n\nDifferent wildcards can be useful in very different context, not only only listing files but also finding text in files. To make such searches as specific as possible there are different wildcards one can use. Some examples are listed below.\n\nThe \\[0-9\\] wildcard = matches any number exactly once and allows us to extract a range of files.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#list only a\nls data/seq_project/barcode00[0-9]*/*.gz\n```\n:::\n\n\nThe \\[012\\] wildcard = matches 1 or 2 exactly once and allows us to extract a range of files.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#list only a\nls data/seq_project/barcode00[12]*/*.gz\n```\n:::\n\n\n\n\\[A-Z\\] matches any letter in capitals occurring once\n\\[a-z\\]\\* matches any letter in non-capital letters occurring many times\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#list only a\nls data/seq_project/barcode001_User1_ITS_1_[A-Z]001/*.gz\n\n```\n:::\n\n\n:::\n\n\n\n## `gzip`: (De)compressing files\n\nAfter downloading and exploring the content of the downloads folder, you see that the file we downloaded ends with `gz`. This indicates that we work with a gzip-compressed file. Gzip is a tool used to (de)-compress the size of files.\n\nIn order to work with files, we sometimes need to de-compress them first. We can do this as follows (by using the decompress, `-d` argument):\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#decompress gz data (-d = decompress)\ngzip -d data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n```\n:::\n\n\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\n1. After running gzip, check if we now have one uncompressed file by using `ls`\n2. Use `ls`  with an option to also view the file size and compare the size of our compressed and uncompressed files.\n\n<details>\n    <summary>Click me to see an answer</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#check the content of the dowloaded folder\nls -l data/seq_project/*/*\n\n#compare the size of the different files\nls -lh data/seq_project/*/*\n```\n:::\n\n\nWe see that our file has a file size of about ~25M after compression while the compressed files are around ~5M. \n\nWhen working with 16S amplicon sequencing files the data is usually much large and its best to keep the files compressed to not clutter your computer.\n\n</details>\n\n:::\n\nTo keep have our files small its best to work with the compressed files. If we want to compress a file, we can do this as follows:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#compress\ngzip data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq\n\n#check if that worked\nls data/seq_project/*/*\n```\n:::\n\n\n\n\n## I/O redirection to new files\n\nBy using some special notations we can redirect the output of many commands to files, devices, and even to the input of other commands.\n\nWe have seen by now that by default many tools direct their standard output to the display. For example, when we use `ls` the list of files and folders is printed to the screen. However, we can also redirect the standard output to a file by using the `>` character.\n\nFor example, we might want to generate a list with all fastq files:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#redirect the output from ls to a new file\nls data/seq_project/*/* > fastq_paths.txt\n```\n:::\n\n\n\n## `cut`: extracting sections from tables\n\nThis will list the full path, but what if we only wanted to list the file name?\n\nThere are different ways to do this, but `cut` allows us to separate columns using any delimiter, for example the `/` we use to separate folders. To ensure that `/` is seen a separator we use the `-d` option and with `-f4` we tell cut to print the fourt element of each separated field.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#view content of the file we work with \nhead fastq_paths.txt\n\n#only extract the file name (i.e. the fourth field when using a / separator)\ncut -f4 -d \"/\" fastq_paths.txt\n\n#store this in a new file\ncut -f4 -d \"/\" fastq_paths.txt > fastq_files.txt\n```\n:::\n\n\n\n## Exploring the content of text files\n\nNext, let's view the content of the list we just generated. Viewing the actual files we work with is often important to ensure the integrity of our data.\n\n#### Using `head`\n\n`head` can be used to check the first 10 rows of our files;\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead fastq_paths.txt\n```\n:::\n\n\n\n### Using `tail`\n\nIf you want to check the last 10 rows use `tail`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail fastq_paths.txt\n```\n:::\n\n\n\n\n### Using `less`\n\n`less` is a program that lets you view a file's contents one screen at a time. This is useful when dealing with a large text file because it doesn't load the entire file but accesses it page by page, resulting in fast loading speeds.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nless -S fastq_paths.txt\n```\n:::\n\n\nOnce opened, less will display the text file one page at a time.\n\n-   You can use the arrow Up and Page arrow keys to move through the text file\n-   To exit less, type `q`\n  \n\n### Using `cat` \n\n`cat` can do different things:\n\n1. Create new files \n2. Display the content of a file\n3. Concatenate, i.e. combine, several files\n\nTo view files we can do:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat fastq_paths.txt\n```\n:::\n\n\nTo combine files we do: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#combine files \ncat fastq_paths.txt fastq_files.txt > combined_files.txt\n\n#view new file \ncat combined_files.txt\n```\n:::\n\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\n\n1. Using wildcards and cat, combine all R1 files into one file\n2. Use ls to judge the file size of the individual R1 files and the combined file to assess whether everything worked correctly\n\n<details>\n    <summary>Click me to see an answer</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#combine files\ncat data/seq_project/*/*R1.fastq.gz > combined.fastq.gz\n\n#view size individual files\nls -lh data/seq_project/*/*R1.fastq.gz\n\n#view size new file \nls -lh combined.fastq.gz\n\n```\n:::\n\n\n</details>\n:::\n\n\n\n\n\n## Exploring the content of compressed fastq files\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\n\n1. View the first few rows of one of the fastq.gz files\n2. Does this look like a normal sequence file to you?\n\n<details>\n    <summary>Click me to see an answer</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n```\n:::\n\n\nAfter running this command you will see a lot of random letters and numbers but nothing that looks like a sequence, so what is going on?\n\n</details>\n:::\n\n\n#### `zcat` to compress and print to screen\n\nTo view the content of a compressed file and make sense of the content we need to first uncompress the file. However, sequence files tend to get rather large and we do not want to clutter the files.\n\nLuckily, there is one useful tool in bash to uncompress the file and print the content to the screen called `zcat`,\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n```\n:::\n\n\nWhen running this we see the content of the whole file printed to the screen. This is a bit better but imagine doing this for a file with millions of sequences. In such a case we would not want to print the whole file to the screen but maybe only the first view rows. \n\n\n\n#### Pipes\n\nPipes are a powerful utility to connect multiple commands together. They allow us to feed the standard output of one command, such as `zcat` as input into another command such as `head` and as such combine multiple commands together:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz | head\n```\n:::\n\n\nAfter running this, we finally see a sequence and some other information. Notice that for fastq files we always should see 4 rows with information for each sequence:\n\n<p align=\"left\">\n<img src=\"../img/fastq_format.png\" width=\"500\"/>\n</p>\n\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\n\n1. View the content of a file ending on R2 (i.e. one of the reverse reads)\n2. Do you see a way how you could distinguish forward from reverse reads?\n\n<details>\n    <summary>Click me to see an answer</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | head\n```\n:::\n\n\nR1 and R2 files have a different header, i.e.\n\n- R1:  1:N:0:TGCTCGTAGT\n- R2:  2:N:0:TGCTCGTAGT\n\nHowever, except this small distinction the headers from the two files should have exactly the same header.\n\n</details>\n:::\n\n\n\n## `wc`: With how much data do we work\n\nAnother useful tool is the `wc` (= wordcount) command and allow us to count the number of lines in a file. As such it is an easy tool for sanity checking and here allows us to count how many sequences we work with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | wc -l\n```\n:::\n\n\nAfter running this we see that we work with 179,384 / 4 sequences. We divide by 4 since each sequence is represented by 4 lines of information in our fastq file.\n\n\n::: {.callout-tip title=\"Tip: Avanced: better counting\" collapse=true}\n\nWe have seen that we need to divide the output of `wc` by four to get the total number of sequences. We can do this with a calculator but actually, some intermediate bash can also be used to do this for us:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | echo $((`wc -l`/4))\n\n```\n:::\n\n\nIn the command above we have some new syntax ` echo $((`wc -l`/4))`\n\n- The echo command is used to display messages or print information to the terminal. In our case it will print whatever is going on in this section `$((`wc -l`/4))`\n- `$((...))`: This is an arithmetic expansion in Bash. It allows you to perform arithmetic operations and substitute the result into the command line.\n- The backticks (``) around wc -l indicate command substitution. This means that the wc -l command is executed, and its output (the number of lines counted) is used in the overall command. Without command substitution (wc -l alone), you would not capture the output; instead, you would only see the literal text \"wc -l\". Command substitution allows you to use the actual result of the command.\n- `/4`: This is dividing the result obtained from wc -l by 4. Since each sequence in a FASTQ file is represented by four lines (identifier, sequence, separator, and quality scores), dividing the total number of lines by 4 gives the number of sequences.\n\n:::\n\n\n## For-loops\n\nImagine we want to count the lines not only on one but all lines, could we do something like this?\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat data/seq_project/*/*.gz | wc -l\n```\n:::\n\n\nThis prints a single number, 869 944, but not the counts for each file, so something did not work right.\n\nThe problem with this command is that it prints the text from all 8 fastq files and only then performs the counting. However, what we want to do is to repeat the same operation over and over again:\n\n- Decompress a first file \n- Count the lines in the first file\n- Decompress a second file\n- Count the lines in the first file\n- ...\n\nA **for loop** is a bash programming language statement which allows code to be repeatedly executed. I.e. it allows us to run a command 2, 3, 5 or 100 times.\n\nLet's start with a simple example:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfor i in 1 2 3; do echo \"Welcome ${i} times\"; done\n```\n:::\n\n\nWe see that `Welcome ...` is printed 3 times. To do this we used a new command, `echo`, which is used to print information to the terminal. Here, you see what this command does step by step:\n\n<p align=\"left\">\n<img src=\"../img/loops.png\" width=\"600\"/>\n</p>\n\nLet's try to do the same but for our files by storing the individual files found in `data/seq_project/*/*.gz` in the variable i and print i.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfor i in data/seq_project/*/*.gz; do echo ${i}; done\n```\n:::\n\n\n- `for i in data/seq_project/*/*.gz; do`: This part initializes a loop that iterates over all files matching the pattern `data/seq_project/*/*.gz`. The variable i is assigned each file in succession.\n\nWe can then use these variables, step-by-step, and read them into zcat followed by wc -l: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfor i in data/seq_project/*/*.gz; do zcat ${i} | wc -l; done\n```\n:::\n\n\n- `zcat ${i} | wc -l`: This is the action performed inside the loop. zcat is used to concatenate and display the content of compressed files (*.gz). The | (pipe) symbol redirects this output to wc -l, which counts the number of lines in the uncompressed content.\n\nSince this easily can get rather long you could also break down the code into several lines for better readability:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfor i in data/seq_project/*/*.gz; do \n    zcat ${i} | wc -l\ndone\n```\n:::\n\n\nSometimes it is useful to not store the full path in `i`, especially when we want to store the output of our loop in a new file. Luckily, we can use the list of files we stored in `fastq_files.txt` to rewrite this command a bit:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfor i in `cat fastq_files.txt`; do  \n    zcat data/seq_project/*/${i} | wc -l\ndone\n```\n:::\n\n\n- ``` for i in `cat fastq_files.txt`; do  ```: This initiates a loop that iterates over each item in the file fastq_files.txt. The backticks \\` are used to execute the command within and assign its output to the variable i.\n- `zcat data/seq_project/*/${i} | wc -l`: Like before, this line uncompresses (zcat) and counts the number of lines in the specified file. However, in this case, the file is determined by the content of fastq_files.txt, which contains a list of file names.\n\nWe can also easily store the output in a file by redirecting the output and using our variable i to name the files appropriately. \n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#generate a new folder to store these files\nmkdir counts \n\nfor i in `cat fastq_files.txt`; do \n    zcat data/seq_project/*/$i | wc -l > counts/${i}.txt\ndone\n\n#check if files were generated \nls counts/*txt \n\n#view content of file \nhead counts/Sample-DUMMY1_R1.fastq.gz.txt\n\n```\n:::\n\n\n\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\n\n1. Use a foor loop to generate two lists lists with the paths to our sequencing data. Generate one file for each user.\n\n<details>\n    <summary>Click me to see an answer</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfor i in User1 User2; do \n    ls data/seq_project/*$i*/* > file_${i}.txt\ndone\n```\n:::\n\n\n</details>\n:::\n\n\n::: {.callout-tip title=\"Tip: Avanced: better counting in for loops\" collapse=true}\n\nLet's get a bit more advanced to show you some powerful features of bash. For this imagine that you would do this for 100 files. In this case it would be useful to see the file names next to the counts. We can achieve this by using what we have learned in the `Better counting tip` where we have learned about echo and command substitution.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfor i in data/seq_project/*/*.gz; do \n    echo \"$i: $(zcat $i | wc -l)\"\ndone\n```\n:::\n\n\n- The echo command is used to display messages or print information to the terminal. In our case it will print whatever is going on here `\"$i: $(zcat $i | wc -l)\"`\n- `$(...)`: These parentheses are used for command substitution. It means that the command `zcat $i | wc -l` is executed, and its output (the line count of the uncompressed content) is substituted in that position.\n- The double quotes (\"\") perform what is called a string concatenation. It concatenates the filename ($i), a colon (:), a space, and the line count obtained from the command substitution. The entire string is then passed as a single argument to the echo command.\n\nAlmost perfect, now we only want to divide this by 4:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfor i in data/seq_project/*/*.gz; do \n    echo \"$i: $(( $(zcat $i | wc -l) /4 ))\"\ndone\n```\n:::\n\n\nNotice, how we use first single brackets and then double brackets?\n\n-  `$((...))` in contrast to `$(...)` is an arithmetic expansion in Bash. It allows you to perform arithmetic operations and substitute the result into the command line.\n\n:::\n\n\n",
    "supporting": [
      "bash_intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}