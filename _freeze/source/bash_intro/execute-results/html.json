{
  "hash": "a9163a871e798d92632919e22bc94edd",
  "result": {
    "markdown": "---\ncode-block-bg: true\ncode-block-border-left: \"#31BAE9\"\nexecute:\n  eval: false\nengine: knitr\nbibliography: references.bib\n---\n\n\n<div style=\"text-align: justify\">\n\n# Introduction to Bash\n\n## `pwd`: Finding out where we are\n\nAfter installing the terminal, let's orient ourselves by typing our first command, `pwd`, into the terminal and pressing enter. `pwd` prints the location of the current working directory and basically tells you where exactly you are. \n\nWhen we login we start from what is called our home directory.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd\n```\n:::\n\n\n::: {.callout-tip title=\"Tip: finding the desktop on different user systems\" collapse=true}\n\nYour home directory will be something like /Users/YourUserName but might be slightly different depending on your operating system. Below you find some help to orient yourself better for different terminal interfaces:\n\nFor MAC users:  \n\n- The home directory should be `/Users/YourUserName`\n- To access the current folder in Finder you can try using `open .`\n- Your desktop should be here `/Users/YourUserName/Desktop`\n\nFor Mobaxterm users:  \n\n- Your home directory is `/home/mobaxterm`\n- By default this home directory is in the Temp folder, which gets deleted evertime you exit Mobaxterm, To give this a persistent home, do the following:\n  - Settings --> Configuration --> General \n  - In there set Persistent home directory to a folder of your choice\n-  To access the file explorer and get used to where you are you can type `explorer.exe .`\n-  The path to the desktop would be something like this `/mnt/c/Users/YourUserName/OneDrive/Desktop` or `/mnt/c/Users/YourUserName/Desktop`\n\nFor WSL2 users:  \n\n-  The home directory is `/home/YourUserName`\n-  To access the file explorer and get used to where you are you can type `explorer.exe .`\n-  You see that the Ubuntu environment is launched separated from your Windows environment\n-  The path to the desktop would be something like this `/mnt/c/Users/YourUserName/OneDrive/Desktop` or `/mnt/c/Users/YourUserName/Desktop`\n:::\n\n## `ls`: List the content of a directory \n\nNow that we know where we are, let's see how to move around by first seeing what files and folders exist in our home directory. For this we can use the `ls` command, which stands for list directory contents:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n```\n:::\n\n\nIn my case this returns something like this:\n\n<p align=\"left\">\n<img src=\"../img/ls.png\" width=\"500\"/>\n</p>\n\nThis might look a bit different for your system in terms of color for file/folder names but what we basically see are the files (in bold text) and folders (green-highlighted text).\n\n\n## The structure of a command\n\nSince this can easily become over-whelming if we deal with a lot of files and folders, lets look a bit closer into how we can optimize our commands.\n\nLetÂ´s start with looking at the general structure of a command:\n\n<p align=\"left\">\n<img src=\"../img/unix_command.png\" width=\"500\"/>\n</p>\n\n\nNow, let's look a bit closer into the `ls` command and use it with an option `-l`, an option we can use that makes ls use a long listing format.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -l\n```\n:::\n\n\nAfter running this, we should see our files and folders but in what is called the long format (which gives more detailed information and structures our output a bit better):\n\n<p align=\"left\">\n<img src=\"../img/ls2.png\" width=\"500\"/>\n</p>\n\n\nIf you are unsure what options come with a program its always a good idea to check out the manual. You can do this with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nman ls\n```\n:::\n\n\nYou can exit the manual by pressing `q`.\n\nIn case you want to check what a program does or what options there are, depending on the program there might be different ways how to do this. These most common ways are:\n\n-   `man ls`\n-   `ls --help`\n-   `ls -h`\n\n\n## `cd`: Moving around folders\n\nMost of the time you do not want to perform your analyses in the home directory but elsewhere. We can use the `cd` command to move around the file system. \n\nThe Unix file system is a hierarchical file system to organize files and directories. It is a tree-like structure that starts with a single directory called the root directory, which is denoted by a forward slash (/) character. All other files are \"descendants\" of root. To move from the root, we can go via the descendants to reach the john folder as follows: `/users/john`\n\n<p align=\"center\">\n<img src=\"../img/filesystem.png\" width=\"500\"/>\n</p>\n\nFor our analyses, we will move into any of the folders that we see listed after we have used `ls -l`. In my case I want to move into the source directory:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd source/\n```\n:::\n\n\nIf you use `pwd` afterwards, then you should see that we moved into another directory. \n\nWe can also move back to our original directory using `cd ..`, which will move the user up one directory (and move us out of the source and back into the home directory). \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ..\n```\n:::\n\n\nWe can also move around multiple levels. In the example below, I am going into the source folder, then back to the home directory and then into the docs folder. \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd source/../docs\n```\n:::\n\n\nAnother useful way to move around quickly is using the tilde symbol, i.e. `~`, which can be used as a shortcut to move directly into our home directory:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ~\n```\n:::\n\n\n::: {.callout-caution collapse=\"false\" title=\"Exercise\"}\nExplore your current location with `pwd` and `ls` and move around with `cd` and try to get used to these three commands. If you are more comfortable, try finding your Deskop based on the tips in the section introducing `pwd`\n:::",
    "supporting": [
      "bash_intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}