[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to the cli",
    "section": "",
    "text": "On this website you will find a short tutorial that will provide guidance in how to use bash and the command line interface.\nThe first few pages called Setting up a terminal and Documenting your code will provide some help in installing a terminal and document your code.\nAfterwards, the actual tutorial will begin, in which we will download some sequencing data and work learn how to explore the data using bash, Specifically,we will learn the following in two sections:\n\nSection 1 can be followed on your own computer and will guide you through the following steps:\n\nLocating what directory we are working and what files are in the folder we are working in\nMoving around the filesystem\nGenerating new folders\nDownloading example data\nExplore the content of compressed sequence files\nGenerating new files\nViewing (and editing) files\nExploring sequence files and finding patterns inside\nCombining multiple files into one\n\nSection 2 will introduce how to use an HPC. This section is specifically designed for users working at the University of Amsterdam (UvA). This section will guide you through the following steps:\n\nGetting access to the UvA Crunchomics HPC\nLearning about what an HPC can be used for\nLogging into an HPC\nUploading (and downloading) files\nSubmitting job via slurm part1 in which we use pre-installed software to explore sequence quality\nInstalling the seqkit software that is not pre-installed using conda\nSubmit a job via slurm part 2 in which we use conda installed software to the number of reads in our sequence files\n\n\nFinally, there will be an optional section with more advanced material that is giving a pre-view into what else you can do with the command line. Here, you find information about:\n\nsed and awk that can be used to manipulate large + numerous files\ngit + github + zenodo that are useful for sharing code + data\nHow to access the Crunchomics application server to use Rstudio\n\n\nTo do:\n\nWork on tutorial pages\nDownload of current example data takes 8 min (reduce size)\nGet familiar with Mobaxterm\nGet familiar with FileZila (added notes in the surf documentation)\n\nMobaxterm\n\nDownload\nStart local terminal\nYou should not store anything in MobaXterm HOME directory (/home/mobaxterm): with your current settings, this folder is not “persistent”, so it will be cleared at each MobaXterm restart. If you want to set a “persistent” HOME directory which will not be cleared at each MobaXterm startup, go to MobaXterm settings window and choose a folder in which to store MobaXterm home files.\nInstall nano with apt install nano"
  },
  {
    "objectID": "index.html#welcome-page",
    "href": "index.html#welcome-page",
    "title": "Introduction to the cli",
    "section": "",
    "text": "On this website you will find a short tutorial that will provide guidance in how to use bash and the command line interface.\nThe first few pages called Setting up a terminal and Documenting your code will provide some help in installing a terminal and document your code.\nAfterwards, the actual tutorial will begin, in which we will download some sequencing data and work learn how to explore the data using bash, Specifically,we will learn the following in two sections:\n\nSection 1 can be followed on your own computer and will guide you through the following steps:\n\nLocating what directory we are working and what files are in the folder we are working in\nMoving around the filesystem\nGenerating new folders\nDownloading example data\nExplore the content of compressed sequence files\nGenerating new files\nViewing (and editing) files\nExploring sequence files and finding patterns inside\nCombining multiple files into one\n\nSection 2 will introduce how to use an HPC. This section is specifically designed for users working at the University of Amsterdam (UvA). This section will guide you through the following steps:\n\nGetting access to the UvA Crunchomics HPC\nLearning about what an HPC can be used for\nLogging into an HPC\nUploading (and downloading) files\nSubmitting job via slurm part1 in which we use pre-installed software to explore sequence quality\nInstalling the seqkit software that is not pre-installed using conda\nSubmit a job via slurm part 2 in which we use conda installed software to the number of reads in our sequence files\n\n\nFinally, there will be an optional section with more advanced material that is giving a pre-view into what else you can do with the command line. Here, you find information about:\n\nsed and awk that can be used to manipulate large + numerous files\ngit + github + zenodo that are useful for sharing code + data\nHow to access the Crunchomics application server to use Rstudio\n\n\nTo do:\n\nWork on tutorial pages\nDownload of current example data takes 8 min (reduce size)\nGet familiar with Mobaxterm\nGet familiar with FileZila (added notes in the surf documentation)\n\nMobaxterm\n\nDownload\nStart local terminal\nYou should not store anything in MobaXterm HOME directory (/home/mobaxterm): with your current settings, this folder is not “persistent”, so it will be cleared at each MobaXterm restart. If you want to set a “persistent” HOME directory which will not be cleared at each MobaXterm startup, go to MobaXterm settings window and choose a folder in which to store MobaXterm home files.\nInstall nano with apt install nano"
  },
  {
    "objectID": "source/installation.html",
    "href": "source/installation.html",
    "title": "Setting up a terminal",
    "section": "",
    "text": "The Linux command-line interface (CLI) is an alternative to a graphical user interface (GUI) with which you are likely more familiar. Both interfaces allow a user to interact with an operating system. The key difference between the CLI and GUI is that the interaction with CLI is based on issuing commands. In contrast, the interaction with a GUI involves visual elements, such as windows, buttons, etc. CLI is often also referred to as the shell, terminal, console, prompt or various other names\nBash is a type of interpreter that processes shell commands. A shell interpreter takes commands in plain text format and calls the operating system to do something, for example changing a directory or modifying the content of some files. Bash itself stands for Bourne Again Shell and it is one of the popular command-line shells used to run other programs, many of which are useful for bioinformatic workflows.\n\n\n\n\n\nThe default shell is usually Bash and there is usually no need to install anything to be able to follow this tutorial. On most versions of Linux, th shell accessible by running the Gnome Terminal or KDE Konsole or xterm, which can be found via the applications menu or the search bar. If your machine is set up to use something other than Bash, you can run it by opening a terminal and typing bash.\n\n\n\nFor Mac running macOS Mojave or earlier releases, the default Unix Shell is Bash. For a Mac computer running macOS Catalina or later releases, the default Unix Shell is Zsh. To open a terminal, try one or both of the following:\n\nIn Finder, select the Go menu, then select Utilities. Locate Terminal in the Utilities folder and open it.\nUse the Mac ‘Spotlight’ computer search function. Search for: Terminal and press Return.\n\nTo ensure that we work with a consistent shell and to check if your machine is set up to use something other than Bash, type echo $SHELL in your terminal window.\nIf your machine is set up to use something other than Bash, you can try switching to Bash by opening a terminal and typing bash. To check if that worked type echo $SHELL again.\n\n\n\nOperating systems like macOS and Linux come with a native command-line terminal, making it straightforward to run bash commands. However, for Windows users you need to install some software first to be able to use bash, below you find three options:\nOne option to access the bash shell commands is using Git Bash, for detailed installation instructions please have a look at the carpenties website.\nA second option is Mobaxterm, which enables Windows users to execute basic Linux/Unix commands on their local machine, connect to an HPC with SSH and to transfer files with SCP/SFTP (more on that later). Installation instructions can be found here.\nA final option is to use Windows and Linux at the same time on a Windows machine. The Windows Subsystem for Linux (WSL2) lets users install a Linux distribution (such as Ubuntu, which is the default Linux distribution, which we recommend to use) and use Linux applications, utilities, and Bash command-line tools directly on Windows. This option allows you to use all the tools available but since you more or less are installing a separating system on your PC needs to have enough memory to run this. Installation instructions can be found here.\n\n\n\n\n\n\nNote\n\n\n\nI am myself mostly familiar with WSL and the following tutorial is tailored towards the location of things when using WSL and Linux and your folder structure might be slightly different when using Git Bash or Mobaxterm.\nSimilarly, I am mainly familiar with the bash not the zsh shell. For Mac users that have a newer MAC and have trouble switching to bash this might create some issues when using wildcards.\nFor both issues: If parts of the tutorial do not work for you due to that, feel free to contact me and I can adjust the tutorial accordingly.\n\n\n\n\n\n\nAfter you set everything up and opened a terminal you should see something like this and are good to go if you want to follow the tutorial:"
  },
  {
    "objectID": "source/installation.html#terminology",
    "href": "source/installation.html#terminology",
    "title": "Setting up a terminal",
    "section": "",
    "text": "The Linux command-line interface (CLI) is an alternative to a graphical user interface (GUI) with which you are likely more familiar. Both interfaces allow a user to interact with an operating system. The key difference between the CLI and GUI is that the interaction with CLI is based on issuing commands. In contrast, the interaction with a GUI involves visual elements, such as windows, buttons, etc. CLI is often also referred to as the shell, terminal, console, prompt or various other names\nBash is a type of interpreter that processes shell commands. A shell interpreter takes commands in plain text format and calls the operating system to do something, for example changing a directory or modifying the content of some files. Bash itself stands for Bourne Again Shell and it is one of the popular command-line shells used to run other programs, many of which are useful for bioinformatic workflows."
  },
  {
    "objectID": "source/installation.html#installation-guides",
    "href": "source/installation.html#installation-guides",
    "title": "Setting up a terminal",
    "section": "",
    "text": "The default shell is usually Bash and there is usually no need to install anything to be able to follow this tutorial. On most versions of Linux, th shell accessible by running the Gnome Terminal or KDE Konsole or xterm, which can be found via the applications menu or the search bar. If your machine is set up to use something other than Bash, you can run it by opening a terminal and typing bash.\n\n\n\nFor Mac running macOS Mojave or earlier releases, the default Unix Shell is Bash. For a Mac computer running macOS Catalina or later releases, the default Unix Shell is Zsh. To open a terminal, try one or both of the following:\n\nIn Finder, select the Go menu, then select Utilities. Locate Terminal in the Utilities folder and open it.\nUse the Mac ‘Spotlight’ computer search function. Search for: Terminal and press Return.\n\nTo ensure that we work with a consistent shell and to check if your machine is set up to use something other than Bash, type echo $SHELL in your terminal window.\nIf your machine is set up to use something other than Bash, you can try switching to Bash by opening a terminal and typing bash. To check if that worked type echo $SHELL again.\n\n\n\nOperating systems like macOS and Linux come with a native command-line terminal, making it straightforward to run bash commands. However, for Windows users you need to install some software first to be able to use bash, below you find three options:\nOne option to access the bash shell commands is using Git Bash, for detailed installation instructions please have a look at the carpenties website.\nA second option is Mobaxterm, which enables Windows users to execute basic Linux/Unix commands on their local machine, connect to an HPC with SSH and to transfer files with SCP/SFTP (more on that later). Installation instructions can be found here.\nA final option is to use Windows and Linux at the same time on a Windows machine. The Windows Subsystem for Linux (WSL2) lets users install a Linux distribution (such as Ubuntu, which is the default Linux distribution, which we recommend to use) and use Linux applications, utilities, and Bash command-line tools directly on Windows. This option allows you to use all the tools available but since you more or less are installing a separating system on your PC needs to have enough memory to run this. Installation instructions can be found here.\n\n\n\n\n\n\nNote\n\n\n\nI am myself mostly familiar with WSL and the following tutorial is tailored towards the location of things when using WSL and Linux and your folder structure might be slightly different when using Git Bash or Mobaxterm.\nSimilarly, I am mainly familiar with the bash not the zsh shell. For Mac users that have a newer MAC and have trouble switching to bash this might create some issues when using wildcards.\nFor both issues: If parts of the tutorial do not work for you due to that, feel free to contact me and I can adjust the tutorial accordingly."
  },
  {
    "objectID": "source/installation.html#sanity-check",
    "href": "source/installation.html#sanity-check",
    "title": "Setting up a terminal",
    "section": "",
    "text": "After you set everything up and opened a terminal you should see something like this and are good to go if you want to follow the tutorial:"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "Introduction to the cli",
    "section": "",
    "text": "tba"
  },
  {
    "objectID": "readme.html#title",
    "href": "readme.html#title",
    "title": "Introduction to the cli",
    "section": "",
    "text": "tba"
  },
  {
    "objectID": "source/code_documentation.html",
    "href": "source/code_documentation.html",
    "title": "Introduction to the cli",
    "section": "",
    "text": "Documenting your code is crucial for both your future self and anyone else who might work with your code. Documentation serves as a roadmap for your code. It helps others (and your future self) understand the purpose, functionality, and usage of your code.\nA Guide to Reproducible Code in Ecology and Evolution gives detailed information on how to organize project folders and how to write clear and reproducible code. The examples are mainly based on R code but most are general enough to apply to other computational langauges (and scientific disciplines).\nIf you want to see an example for documented code, check out [this example file]tba. The example file is a markdown file (qmd) generated with VSCode. Some examples for text editors to use can be found below.\n\n\n\n\n\n\nNote\n\n\n\nThe information in this section is not part of the actual tutorial but was added to give you a starting point for how to document your code.\nIf you follow the in-person tutorial it is best to record your notes using a plain text editor but feel free to explore the more advanced options after the tutorial.\n\n\n\n\n\n\n\nWhen documenting code, its best to avoid visual editors, such as word, as they are not designed for writing code and easily destroy the formating by for example changing ` to ’, which when writing code is quite a big difference.\nInstead you can use a plain text editor, such as TextEdit (Mac) or Notepad (Windows). This is the easiest to get started but you will loose some functionality, such as adding headers or writing text in bold.\nAlternatives, that offer more functionality, are for example RStudio or VScode.\n\n\n\nRMarkdown is an extension of Markdown that allows you to integrate R code directly into your documentation.\nIf you have not install R and Rstudio, follow these instructions.\nIn RStudio you can create an R Markdown File by:\n\nIn RStudio, go to File -&gt; New File -&gt; R Markdown\nChoose a title, author, and output format\nKnit the Document:\n\nClick the “Knit” button to render your R Markdown document into the chosen output format.\n\n\nFor more information visit the RMarkdown tutorial.\n\n\n\nQuarto is an alternative to RMarkdown for creating dynamic documents in RStudio but can be read by other editors, such as VScode. Compared to RMarkdown it provides enhanced features for document creation and includes many more built in output formats (and many more options for customizing each format).\nIt is installed by default on newer R installations.\n\nIn RStudio, go to File -&gt; New File -&gt; Quarto document\nChoose a title, author, and output format\nRender the Document:\n\nClick the “Render” button to render your R Markdown document into the chosen output format.\n\n\nFor more information (and more functionality) visit the Quarto website.\n\n\n\nVisual Studio Code (VSCode) is a versatile and user-friendly code editor. It provides excellent support for various programming languages, extensions, and a built-in terminal but might take a bit of work to setup to work with different compuational languages.\n\nInstallation:\n\nDownload and install VSCode from here.\n\nExtensions:\n\nInstall extensions relevant to your programming language (e.g., Python, R). These extensions enhance code highlighting and provide additional features.\n\n\n\n\n\n\nMarkdown is a lightweight markup language that’s easy to read and write. It allows you to add formatting elements to plain text documents.\nHeaders:\nUse # for headers. The more # symbols, the smaller the header. When writing a header make sure to always put a space between the # and the header name.\n# Main Header\n## Subheader\nLists:\nUse - or * for unordered lists and numbers for ordered lists.\nOrdered lists are created by using numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one.\n1. First item\n2. Second item\n3. Third item\n4. Fourth item \n1. First item\n2. Second item\n3. Third item\n    1. Indented item\n    2. Indented item\n4. Fourth item \nUnordered lists are created using dashes (-), asterisks (*), or plus signs (+) in front of line items. Indent one or more items to create a nested list.\n- First item\n- Second item\n- Third item\n- Fourth item \n - First item\n- Second item\n- Third item\n    - Indented item\n    - Indented item\n- Fourth item \nYou can also combine ordered with unordered lists:\n1. First item\n2. Second item\n3. Third item\n    - Indented item\n    - Indented item\n4. Fourth item\nCode Blocks:\nEnclose code snippets in triple backticks.\n```bash\ngrep \"control\" downloads/Experiment1.txt\n```\nLinks:\nCreate links to external resources or within your documentation.\n[Link Text](https://www.example.com)\nEmphasis:\nUse * or _ for italic and ** or __ for bold.\n*italic*\n**bold**\nPictures\nYou can easily add images to your documentation as well:\n![Alt Text](path/to/your/image.jpg)\nHere, replace Alt Text with a descriptive alternative text for your image, and path/to/your/ifrom spamage.jpg with the actual path or URL of your image.\nTables\nTables can be useful for organizing information. Here’s a simple table:\n| Header 1 | Header 2 |\n| ---------| ---------|\n| Content 1| Content 2|\n| Content 3| Content 4|"
  },
  {
    "objectID": "source/code_documentation.html#documenting-code",
    "href": "source/code_documentation.html#documenting-code",
    "title": "Introduction to the cli",
    "section": "",
    "text": "Documenting your code is crucial for both your future self and anyone else who might work with your code. Documentation serves as a roadmap for your code. It helps others (and your future self) understand the purpose, functionality, and usage of your code.\nA Guide to Reproducible Code in Ecology and Evolution gives detailed information on how to organize project folders and how to write clear and reproducible code. The examples are mainly based on R code but most are general enough to apply to other computational langauges (and scientific disciplines).\nIf you want to see an example for documented code, check out [this example file]tba. The example file is a markdown file (qmd) generated with VSCode. Some examples for text editors to use can be found below.\n\n\n\n\n\n\nNote\n\n\n\nThe information in this section is not part of the actual tutorial but was added to give you a starting point for how to document your code.\nIf you follow the in-person tutorial it is best to record your notes using a plain text editor but feel free to explore the more advanced options after the tutorial."
  },
  {
    "objectID": "source/code_documentation.html#choose-your-editor",
    "href": "source/code_documentation.html#choose-your-editor",
    "title": "Introduction to the cli",
    "section": "",
    "text": "When documenting code, its best to avoid visual editors, such as word, as they are not designed for writing code and easily destroy the formating by for example changing ` to ’, which when writing code is quite a big difference.\nInstead you can use a plain text editor, such as TextEdit (Mac) or Notepad (Windows). This is the easiest to get started but you will loose some functionality, such as adding headers or writing text in bold.\nAlternatives, that offer more functionality, are for example RStudio or VScode.\n\n\n\nRMarkdown is an extension of Markdown that allows you to integrate R code directly into your documentation.\nIf you have not install R and Rstudio, follow these instructions.\nIn RStudio you can create an R Markdown File by:\n\nIn RStudio, go to File -&gt; New File -&gt; R Markdown\nChoose a title, author, and output format\nKnit the Document:\n\nClick the “Knit” button to render your R Markdown document into the chosen output format.\n\n\nFor more information visit the RMarkdown tutorial.\n\n\n\nQuarto is an alternative to RMarkdown for creating dynamic documents in RStudio but can be read by other editors, such as VScode. Compared to RMarkdown it provides enhanced features for document creation and includes many more built in output formats (and many more options for customizing each format).\nIt is installed by default on newer R installations.\n\nIn RStudio, go to File -&gt; New File -&gt; Quarto document\nChoose a title, author, and output format\nRender the Document:\n\nClick the “Render” button to render your R Markdown document into the chosen output format.\n\n\nFor more information (and more functionality) visit the Quarto website.\n\n\n\nVisual Studio Code (VSCode) is a versatile and user-friendly code editor. It provides excellent support for various programming languages, extensions, and a built-in terminal but might take a bit of work to setup to work with different compuational languages.\n\nInstallation:\n\nDownload and install VSCode from here.\n\nExtensions:\n\nInstall extensions relevant to your programming language (e.g., Python, R). These extensions enhance code highlighting and provide additional features."
  },
  {
    "objectID": "source/code_documentation.html#markdown-for-documentation",
    "href": "source/code_documentation.html#markdown-for-documentation",
    "title": "Introduction to the cli",
    "section": "",
    "text": "Markdown is a lightweight markup language that’s easy to read and write. It allows you to add formatting elements to plain text documents.\nHeaders:\nUse # for headers. The more # symbols, the smaller the header. When writing a header make sure to always put a space between the # and the header name.\n# Main Header\n## Subheader\nLists:\nUse - or * for unordered lists and numbers for ordered lists.\nOrdered lists are created by using numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one.\n1. First item\n2. Second item\n3. Third item\n4. Fourth item \n1. First item\n2. Second item\n3. Third item\n    1. Indented item\n    2. Indented item\n4. Fourth item \nUnordered lists are created using dashes (-), asterisks (*), or plus signs (+) in front of line items. Indent one or more items to create a nested list.\n- First item\n- Second item\n- Third item\n- Fourth item \n - First item\n- Second item\n- Third item\n    - Indented item\n    - Indented item\n- Fourth item \nYou can also combine ordered with unordered lists:\n1. First item\n2. Second item\n3. Third item\n    - Indented item\n    - Indented item\n4. Fourth item\nCode Blocks:\nEnclose code snippets in triple backticks.\n```bash\ngrep \"control\" downloads/Experiment1.txt\n```\nLinks:\nCreate links to external resources or within your documentation.\n[Link Text](https://www.example.com)\nEmphasis:\nUse * or _ for italic and ** or __ for bold.\n*italic*\n**bold**\nPictures\nYou can easily add images to your documentation as well:\n![Alt Text](path/to/your/image.jpg)\nHere, replace Alt Text with a descriptive alternative text for your image, and path/to/your/ifrom spamage.jpg with the actual path or URL of your image.\nTables\nTables can be useful for organizing information. Here’s a simple table:\n| Header 1 | Header 2 |\n| ---------| ---------|\n| Content 1| Content 2|\n| Content 3| Content 4|"
  },
  {
    "objectID": "source/bash_intro.html",
    "href": "source/bash_intro.html",
    "title": "Introduction to Bash",
    "section": "",
    "text": "After installing the terminal, let’s orient ourselves by typing our first command, pwd, into the terminal and pressing enter. pwd prints the location of the current working directory and basically tells you where exactly you are.\nWhen we login we start from what is called our home directory.\n\npwd\n\n\n\n\n\n\n\nTip: finding the desktop on different user systems\n\n\n\n\n\nYour home directory will be something like /Users/YourUserName but might be slightly different depending on your operating system. Below you find some help to orient yourself better for different terminal interfaces:\nFor MAC users:\n\nThe home directory should be /Users/YourUserName\nTo access the current folder in Finder you can try using open .\nYour desktop should be here /Users/YourUserName/Desktop\n\nFor Mobaxterm users:\n\nYour home directory is /home/mobaxterm\nBy default this home directory is in the Temp folder, which gets deleted evertime you exit Mobaxterm, To give this a persistent home, do the following:\n\nSettings –&gt; Configuration –&gt; General\nIn there set Persistent home directory to a folder of your choice\n\nTo access the file explorer and get used to where you are you can type explorer.exe .\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\nFor WSL2 users:\n\nThe home directory is /home/YourUserName\nTo access the file explorer and get used to where you are you can type explorer.exe .\nYou see that the Ubuntu environment is launched separated from your Windows environment\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\n\n\n\n\n\n\nNow that we know where we are, let’s see how to move around by first seeing what files and folders exist in our home directory. For this we can use the ls command, which stands for list directory contents:\n\nls\n\nIn my case this returns something like this:\n\n\n\nThis might look a bit different for your system in terms of color for file/folder names but what we basically see are the files (in bold text) and folders (green-highlighted text).\n\n\n\nSince this can easily become over-whelming if we deal with a lot of files and folders, lets look a bit closer into how we can optimize our commands.\nLet´s start with looking at the general structure of a command:\n\n\n\nNow, let’s look a bit closer into the ls command and use it with an option -l, an option we can use that makes ls use a long listing format.\n\nls -l\n\nAfter running this, we should see our files and folders but in what is called the long format (which gives more detailed information and structures our output a bit better):\n\n\n\nIf you are unsure what options come with a program its always a good idea to check out the manual. You can do this with:\n\nman ls\n\nYou can exit the manual by pressing q.\nIn case you want to check what a program does or what options there are, depending on the program there might be different ways how to do this. These most common ways are:\n\nman ls\nls --help\nls -h\n\n\n\n\nMost of the time you do not want to perform your analyses in the home directory but elsewhere. We can use the cd command to move around the file system.\nThe Unix file system is a hierarchical file system to organize files and directories. It is a tree-like structure that starts with a single directory called the root directory, which is denoted by a forward slash (/) character. All other files are “descendants” of root. To move from the root, we can go via the descendants to reach the john folder as follows: /users/john\n\n\n\nFor our analyses, we will move into any of the folders that we see listed after we have used ls -l. In my case I want to move into the source directory:\n\ncd source/\n\nIf you use pwd afterwards, then you should see that we moved into another directory.\nWe can also move back to our original directory using cd .., which will move the user up one directory (and move us out of the source and back into the home directory).\n\ncd ..\n\nWe can also move around multiple levels. In the example below, I am going into the source folder, then back to the home directory and then into the docs folder.\n\ncd source/../docs\n\nAnother useful way to move around quickly is using the tilde symbol, i.e. ~, which can be used as a shortcut to move directly into our home directory:\n\ncd ~\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\nExplore your current location with pwd and ls and move around with cd and try to get used to these three commands. If you are more comfortable, try finding your Deskop based on the tips in the section introducing pwd\n\n\n\n\n\n\nNow that we know how to explore our surroundings, let us make a new folder in which we start our data analysios. For this we use the mkdir command.\nTo do this, we will first move into our home directory and create a new folder and move into that folder as follows:\n\n#go into the folder from which you want to work (i.e. the home directory)\ncd ~\n\n#make a new folder (in the directory we currently are in, name it new_older)\nmkdir data_analysis\n\n#check if new folder was generated\nls\n\n#next we move into the newly generated folder\ncd data_analysis\n\n#check if we correctly changed our location\npwd\n\n\n\n\n\n\n\nTip: Command-line completion\n\n\n\n\n\nMost command-line interpreters allow to automatically fill in partially typed commands, file paths or file names.\nSo instead having to type out data_analysis completely when changing the directory, we can let the interpreter do the work for us.\nTo do this, start from the data_analysis folder and type cd data_ and press the Tab-key on your keyboard. The cli should have auto-completed the folder name automatically.\nIf there are multiple options, such as data and data_analysis, the cli can not autocomplete the folder name, however, by pressing Tab twice you will see all options to extend the name.\n\n\n\n\n\n\nNext, let’s download our sequencing data into a new data folder. One way to do this is using the wget. In the command below we add the option -P to specify where to download the data:\n\n#make a folder for our downloads\nmkdir data\n\n#download a genome from ncbi using wget\nwget -P data https://github.com/ndombrowski/cli_workshop/raw/main/data/seq_project.tar.gz\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nCheck with ls if the file was downloaded correctly\nCheck the manual if there are extra options that we can use for ls to check the file size (advanced)\n\n\n\nClick me to see an answer\n\n\n#check if file was downloaded\nls -l data/\n\n#check file size\nls -lh data/seq_project.tar.gz\n\n\n\n\n\n\n\n\nThe data we downloaded is provided as a tar file:\n\ntar is short for Tape Archive, and sometimes referred to as tarball\nThe TAR file format is common in Unix and Unix-like systems when storing data\nTAR files are often compressed after being created and then become TGZ files, using the tgz, tar.gz, or gz extension.\n\nWe can decompress the data into our data folder as follows:\n\ntar -xvf data/seq_project.tar.gz -C data\n\nThe options we use are:\n\nx tells it to extract files from the archive\nv display verbose information and provide detailed information while creating the tarball\nf specify the file name\nC tells tar to change directory (so the package content will be unpacked there)\n\n\n\n\n\n\n\nTip: how to generate a tarball\n\n\n\n\n\nIf you ever want to generate a tarball you can do the following:\n\ntar -cvzf my_tarball.tar.gz folder_to_tar\n\nThe options we use are:\n\nc create an archive by bundeling files and directories together\nz use gzip compression when generating the tar file\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nAfter extracting the tarball use ls to explore the content we just downloaded\nFind the path to reach at least one sequence file. Hint, to make your life easier, check the Tip: Command-line completion above.\n\n\n\nClick me to see an answer\n\n\n#check the content of the dowloaded folder\nls -l data/seq_project\n\n#find a sequence file\nls -l data/seq_project/barcode001_User1_ITS_1_L001/\n\n\n\n\n\n\n\n\nAfter exploring our folder, we have seen that data/seq_project contains 4 folders, 2 folders for different users who each generated two replicates.\nHowever, you might have also noticed that it gets tedious to figure out how many files are in each folder because we would need to run ls on each single folder and view its content individually.\nLuckily, the shell provides special characters to help you rapidly specify groups of filenames. Wild-cards are characters can be used as a substitute for any class of characters in a search.\nThe * wildcard is the wildcard with the broadest meaning of any of the wildcards, it can represent 0 characters, all single characters or any string of characters. I.e. we can list all files in our folders as follows:\n\n#list all files in every single folder that is found in seq_project\nls data/seq_project/*/\n\nSince we see that the sequencing files all end with .fastq.gz we can make this command a bit more specific and at the same time make the output a bit more readable:\n\n#list all files in every single folder that is found in seq_project\nls data/seq_project/*/*.gz\n\nNow we can easily see for each folder how many files we have.\n\n\n\n\n\n\nTip: More wildcards\n\n\n\n\n\n* is not the only wildcard we can use and a full list can be found here.\nDifferent wildcards can be useful in very different context, not only only listing files but also finding text in files. To make such searches as specific as possible there are different wildcards one can use. Some examples are listed below.\nThe [0-9] wildcard = matches any number exactly once and allows us to extract a range of files.\n\n#list only a\nls data/seq_project/barcode00[0-9]*/*.gz\n\nThe [012] wildcard = matches 1 or 2 exactly once and allows us to extract a range of files.\n\n#list only a\nls data/seq_project/barcode00[12]*/*.gz\n\n[A-Z] matches any letter in capitals occurring once [a-z]* matches any letter in non-capital letters occurring many times\n\n#list only a\nls data/seq_project/barcode001_User1_ITS_1_[A-Z]001/*.gz\n\n\n\n\n\n\n\nAfter downloading and exploring the content of the downloads folder, you see that the file we downloaded ends with gz. This indicates that we work with a gzip-compressed file. Gzip is a tool used to (de)-compress the size of files.\nIn order to work with files, we sometimes need to de-compress them first. We can do this as follows (by using the decompress, -d argument):\n\n#decompress gz data (-d = decompress)\ngzip -d data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nAfter running gzip, check if we now have one uncompressed file by using ls\nUse ls with an option to also view the file size and compare the size of our compressed and uncompressed files.\n\n\n\nClick me to see an answer\n\n\n#check the content of the dowloaded folder\nls -l data/seq_project/*/*\n\n#compare the size of the different files\nls -lh data/seq_project/*/*\n\nWe see that our file has a file size of about ~25M after compression while the compressed files are around ~5M.\nWhen working with 16S amplicon sequencing files the data is usually much large and its best to keep the files compressed to not clutter your computer.\n\n\n\n\nTo keep have our files small its best to work with the compressed files. If we want to compress a file, we can do this as follows:\n\n#compress\ngzip data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq\n\n#check if that worked\nls data/seq_project/*/*\n\n\n\n\nBy using some special notations we can redirect the output of many commands to files, devices, and even to the input of other commands.\nWe have seen by now that by default many tools direct their standard output to the display. For example, when we use ls the list of files and folders is printed to the screen. However, we can also redirect the standard output to a file by using the &gt; character.\nFor example, we might want to generate a list with all fastq files:\n\n#redirect the output from ls to a new file\nls data/seq_project/*/* &gt; fastq_paths.txt\n\n\n\n\nThis will list the full path, but what if we only wanted to list the file name?\nThere are different ways to do this, but cut allows us to separate columns using any delimiter, for example the / we use to separate folders. To ensure that / is seen a separator we use the -d option and with -f4 we tell cut to print the fourt element of each separated field.\n\n#view content of the file we work with \nhead fastq_paths.txt\n\n#only extract the file name (i.e. the fourth field when using a / separator)\ncut -f4 -d \"/\" fastq_paths.txt\n\n#store this in a new file\ncut -f4 -d \"/\" fastq_paths.txt &gt; fastq_files.txt\n\n\n\n\nNext, let’s view the content of the list we just generated. Viewing the actual files we work with is often important to ensure the integrity of our data.\n\n\nhead can be used to check the first 10 rows of our files;\n\nhead fastq_paths.txt\n\n\n\n\nIf you want to check the last 10 rows use tail\n\ntail fastq_paths.txt\n\n\n\n\nless is a program that lets you view a file’s contents one screen at a time. This is useful when dealing with a large text file because it doesn’t load the entire file but accesses it page by page, resulting in fast loading speeds.\n\nless -S fastq_paths.txt\n\nOnce opened, less will display the text file one page at a time.\n\nYou can use the arrow Up and Page arrow keys to move through the text file\nTo exit less, type q\n\n\n\n\ncat can do different things:\n\nCreate new files\nDisplay the content of a file\nConcatenate, i.e. combine, several files\n\nTo view files we can do:\n\ncat fastq_paths.txt\n\nTo combine files we do:\n\n#combine files \ncat fastq_paths.txt fastq_files.txt &gt; combined_files.txt\n\n#view new file \ncat combined_files.txt\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nUsing wildcards and cat, combine all R1 files into one file\nUse ls to judge the file size of the individual R1 files and the combined file to assess whether everything worked correctly\n\n\n\nClick me to see an answer\n\n\n#combine files\ncat data/seq_project/*/*R1.fastq.gz &gt; combined.fastq.gz\n\n#view size individual files\nls -lh data/seq_project/*/*R1.fastq.gz\n\n#view size new file \nls -lh combined.fastq.gz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nView the first few rows of one of the fastq.gz files\nDoes this look like a normal sequence file to you?\n\n\n\nClick me to see an answer\n\n\nhead data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n\nAfter running this command you will see a lot of random letters and numbers but nothing that looks like a sequence, so what is going on?\n\n\n\n\n\n\nTo view the content of a compressed file and make sense of the content we need to first uncompress the file. However, sequence files tend to get rather large and we do not want to clutter the files.\nLuckily, there is one useful tool in bash to uncompress the file and print the content to the screen called zcat,\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n\nWhen running this we see the content of the whole file printed to the screen. This is a bit better but imagine doing this for a file with millions of sequences. In such a case we would not want to print the whole file to the screen but maybe only the first view rows.\n\n\n\nPipes are a powerful utility to connect multiple commands together. They allow us to feed the standard output of one command, such as zcat as input into another command such as head and as such combine multiple commands together:\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz | head\n\nAfter running this, we finally see a sequence and some other information. Notice that for fastq files we always should see 4 rows with information for each sequence:\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nView the content of a file ending on R2 (i.e. one of the reverse reads)\nDo you see a way how you could distinguish forward from reverse reads?\n\n\n\nClick me to see an answer\n\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | head\n\nR1 and R2 files have a different header, i.e.\n\nR1: 1:N:0:TGCTCGTAGT\nR2: 2:N:0:TGCTCGTAGT\n\nHowever, except this small distinction the headers from the two files should have exactly the same header.\n\n\n\n\n\n\n\n\nAnother useful tool is the wc (= wordcount) command and allow us to count the number of lines in a file. As such it is an easy tool for sanity checking and here allows us to count how many sequences we work with:\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | wc -l\n\nAfter running this we see that we work with 179,384 / 4 sequences. We divide by 4 since each sequence is represented by 4 lines of information in our fastq file.\n\n\n\n\n\n\nTip: Avanced: better counting\n\n\n\n\n\nWe have seen that we need to divide the output of wc by four to get the total number of sequences. We can do this with a calculator but actually, some intermediate bash can also be used to do this for us:\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | echo $((`wc -l`/4))\n\nIn the command above we have some new syntax echo $((wc -l/4))\n\nThe echo command is used to display messages or print information to the terminal. In our case it will print whatever is going on in this section $((wc -l/4))\n$((...)): This is an arithmetic expansion in Bash. It allows you to perform arithmetic operations and substitute the result into the command line.\nThe backticks (``) around wc -l indicate command substitution. This means that the wc -l command is executed, and its output (the number of lines counted) is used in the overall command. Without command substitution (wc -l alone), you would not capture the output; instead, you would only see the literal text “wc -l”. Command substitution allows you to use the actual result of the command.\n/4: This is dividing the result obtained from wc -l by 4. Since each sequence in a FASTQ file is represented by four lines (identifier, sequence, separator, and quality scores), dividing the total number of lines by 4 gives the number of sequences.\n\n\n\n\n\n\n\nImagine we want to count the lines not only on one but all lines, could we do something like this?\n\nzcat data/seq_project/*/*.gz | wc -l\n\nThis prints a single number, 869 944, but not the counts for each file, so something did not work right.\nThe problem with this command is that it prints the text from all 8 fastq files and only then performs the counting. However, what we want to do is to repeat the same operation over and over again:\n\nDecompress a first file\nCount the lines in the first file\nDecompress a second file\nCount the lines in the first file\n…\n\nA for loop is a bash programming language statement which allows code to be repeatedly executed. I.e. it allows us to run a command 2, 3, 5 or 100 times.\nLet’s start with a simple example:\n\nfor i in 1 2 3; do echo \"Welcome ${i} times\"; done\n\nWe see that Welcome ... is printed 3 times. To do this we used a new command, echo, which is used to print information to the terminal. Here, you see what this command does step by step:\n\n\n\nLet’s try to do the same but for our files by storing the individual files found in data/seq_project/*/*.gz in the variable i and print i.\n\nfor i in data/seq_project/*/*.gz; do echo ${i}; done\n\n\nfor i in data/seq_project/*/*.gz; do: This part initializes a loop that iterates over all files matching the pattern data/seq_project/*/*.gz. The variable i is assigned each file in succession.\n\nWe can then use these variables, step-by-step, and read them into zcat followed by wc -l:\n\nfor i in data/seq_project/*/*.gz; do zcat ${i} | wc -l; done\n\n\nzcat ${i} | wc -l: This is the action performed inside the loop. zcat is used to concatenate and display the content of compressed files (*.gz). The | (pipe) symbol redirects this output to wc -l, which counts the number of lines in the uncompressed content.\n\nSince this easily can get rather long you could also break down the code into several lines for better readability:\n\nfor i in data/seq_project/*/*.gz; do \n    zcat ${i} | wc -l\ndone\n\nSometimes it is useful to not store the full path in i, especially when we want to store the output of our loop in a new file. Luckily, we can use the list of files we stored in fastq_files.txt to rewrite this command a bit:\n\nfor i in `cat fastq_files.txt`; do  \n    zcat data/seq_project/*/${i} | wc -l\ndone\n\n\nfor i in `cat fastq_files.txt`; do: This initiates a loop that iterates over each item in the file fastq_files.txt. The backticks ` are used to execute the command within and assign its output to the variable i.\nzcat data/seq_project/*/${i} | wc -l: Like before, this line uncompresses (zcat) and counts the number of lines in the specified file. However, in this case, the file is determined by the content of fastq_files.txt, which contains a list of file names.\n\nWe can also easily store the output in a file by redirecting the output and using our variable i to name the files appropriately.\n\n#generate a new folder to store these files\nmkdir counts \n\nfor i in `cat fastq_files.txt`; do \n    zcat data/seq_project/*/$i | wc -l &gt; counts/${i}.txt\ndone\n\n#check if files were generated \nls counts/*txt \n\n#view content of file \nhead counts/Sample-DUMMY1_R1.fastq.gz.txt\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nUse a foor loop to generate two lists lists with the paths to our sequencing data. Generate one file for each user.\n\n\n\nClick me to see an answer\n\n\nfor i in User1 User2; do \n    ls data/seq_project/*$i*/* &gt; file_${i}.txt\ndone\n\n\n\n\n\n\n\n\n\n\n\nTip: Avanced: better counting in for loops\n\n\n\n\n\nLet’s get a bit more advanced to show you some powerful features of bash. For this imagine that you would do this for 100 files. In this case it would be useful to see the file names next to the counts. We can achieve this by using what we have learned in the Better counting tip where we have learned about echo and command substitution.\n\nfor i in data/seq_project/*/*.gz; do \n    echo \"$i: $(zcat $i | wc -l)\"\ndone\n\n\nThe echo command is used to display messages or print information to the terminal. In our case it will print whatever is going on here \"$i: $(zcat $i | wc -l)\"\n$(...): These parentheses are used for command substitution. It means that the command zcat $i | wc -l is executed, and its output (the line count of the uncompressed content) is substituted in that position.\nThe double quotes (““) perform what is called a string concatenation. It concatenates the filename ($i), a colon (:), a space, and the line count obtained from the command substitution. The entire string is then passed as a single argument to the echo command.\n\nAlmost perfect, now we only want to divide this by 4:\n\nfor i in data/seq_project/*/*.gz; do \n    echo \"$i: $(( $(zcat $i | wc -l) /4 ))\"\ndone\n\nNotice, how we use first single brackets and then double brackets?\n\n$((...)) in contrast to $(...) is an arithmetic expansion in Bash. It allows you to perform arithmetic operations and substitute the result into the command line."
  },
  {
    "objectID": "source/bash_intro.html#introduction-to-bash",
    "href": "source/bash_intro.html#introduction-to-bash",
    "title": "Introduction to the cli",
    "section": "",
    "text": "After installing the terminal, let’s orient ourselves by typing our first command, pwd, into the terminal and pressing enter. pwd prints the location of the current working directory and basically tells you where exactly you are.\nWhen we login we start from what is called our home directory.\n\npwd\n\n\n\n\n\n\n\nTip: finding the desktop on different user systems\n\n\n\n\n\nYour home directory will be something like /Users/YourUserName but might be slightly different depending on your operating system. Below you find some help to orient yourself better for different terminal interfaces:\nFor MAC users:\n\nThe home directory should be /Users/YourUserName\nTo access the current folder in Finder you can try using open .\nYour desktop should be here /Users/YourUserName/Desktop\n\nFor Mobaxterm users:\n\nYour home directory is /home/mobaxterm\nBy default this home directory is in the Temp folder, which gets deleted evertime you exit Mobaxterm, To give this a persistent home, do the following:\n\nSettings –&gt; Configuration –&gt; General\nIn there set Persistent home directory to a folder of your choice\n\nTo access the file explorer and get used to where you are you can type explorer.exe .\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\nFor WSL2 users:\n\nThe home directory is /home/YourUserName\nTo access the file explorer and get used to where you are you can type explorer.exe .\nYou see that the Ubuntu environment is launched separated from your Windows environment\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\n\n\n\n\n\n\nNow that we know where we are, let’s see how to move around by first seeing what files and folders exist in our home directory. For this we can use the ls command, which stands for list directory contents:\n\nls\n\nIn my case this returns something like this:\n\n\n\nThis might look a bit different for your system in terms of color for file/folder names but what we basically see are the files (in bold text) and folders (green-highlighted text).\n\n\n\nSince this can easily become over-whelming if we deal with a lot of files and folders, lets look a bit closer into how we can optimize our commands.\nLet´s start with looking at the general structure of a command:\n\n\n\nNow, let’s look a bit closer into the ls command and use it with an option -l, an option we can use that makes ls use a long listing format.\n\nls -l\n\nAfter running this, we should see our files and folders but in what is called the long format (which gives more detailed information and structures our output a bit better):\n\n\n\nIf you are unsure what options come with a program its always a good idea to check out the manual. You can do this with:\n\nman ls\n\nYou can exit the manual by pressing q.\nIn case you want to check what a program does or what options there are, depending on the program there might be different ways how to do this. These most common ways are:\n\nman ls\nls --help\nls -h\n\n\n\n\nMost of the time you do not want to perform your analyses in the home directory but elsewhere. We can use the cd command to move around the file system.\nThe Unix file system is a hierarchical file system to organize files and directories. It is a tree-like structure that starts with a single directory called the root directory, which is denoted by a forward slash (/) character. All other files are “descendants” of root. To move from the root, we can go via the descendants to reach the john folder as follows: /users/john\n\n\n\nFor our analyses, we will move into any of the folders that we see listed after we have used ls -l. In my case I want to move into the source directory:\n\ncd source/\n\nIf you use pwd afterwards, then you should see that we moved into another directory.\nWe can also move back to our original directory using cd .., which will move the user up one directory (and move us out of the source and back into the home directory).\n\ncd ..\n\nWe can also move around multiple levels. In the example below, I am going into the source folder, then back to the home directory and then into the docs folder.\n\ncd source/../docs\n\nExercise\nExplore your current location with pwd and ls and move around with cd and try to get used to these three commands. If you are more comfortable, try finding your Deskop based on the tips in the section introducing pwd"
  },
  {
    "objectID": "source/bash_intro.html#pwd-finding-out-where-we-are",
    "href": "source/bash_intro.html#pwd-finding-out-where-we-are",
    "title": "Introduction to Bash",
    "section": "",
    "text": "After installing the terminal, let’s orient ourselves by typing our first command, pwd, into the terminal and pressing enter. pwd prints the location of the current working directory and basically tells you where exactly you are.\nWhen we login we start from what is called our home directory.\n\npwd\n\n\n\n\n\n\n\nTip: finding the desktop on different user systems\n\n\n\n\n\nYour home directory will be something like /Users/YourUserName but might be slightly different depending on your operating system. Below you find some help to orient yourself better for different terminal interfaces:\nFor MAC users:\n\nThe home directory should be /Users/YourUserName\nTo access the current folder in Finder you can try using open .\nYour desktop should be here /Users/YourUserName/Desktop\n\nFor Mobaxterm users:\n\nYour home directory is /home/mobaxterm\nBy default this home directory is in the Temp folder, which gets deleted evertime you exit Mobaxterm, To give this a persistent home, do the following:\n\nSettings –&gt; Configuration –&gt; General\nIn there set Persistent home directory to a folder of your choice\n\nTo access the file explorer and get used to where you are you can type explorer.exe .\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\nFor WSL2 users:\n\nThe home directory is /home/YourUserName\nTo access the file explorer and get used to where you are you can type explorer.exe .\nYou see that the Ubuntu environment is launched separated from your Windows environment\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop"
  },
  {
    "objectID": "source/bash_intro.html#ls-list-the-content-of-a-directory",
    "href": "source/bash_intro.html#ls-list-the-content-of-a-directory",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Now that we know where we are, let’s see how to move around by first seeing what files and folders exist in our home directory. For this we can use the ls command, which stands for list directory contents:\n\nls\n\nIn my case this returns something like this:\n\n\n\nThis might look a bit different for your system in terms of color for file/folder names but what we basically see are the files (in bold text) and folders (green-highlighted text)."
  },
  {
    "objectID": "source/bash_intro.html#the-structure-of-a-command",
    "href": "source/bash_intro.html#the-structure-of-a-command",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Since this can easily become over-whelming if we deal with a lot of files and folders, lets look a bit closer into how we can optimize our commands.\nLet´s start with looking at the general structure of a command:\n\n\n\nNow, let’s look a bit closer into the ls command and use it with an option -l, an option we can use that makes ls use a long listing format.\n\nls -l\n\nAfter running this, we should see our files and folders but in what is called the long format (which gives more detailed information and structures our output a bit better):\n\n\n\nIf you are unsure what options come with a program its always a good idea to check out the manual. You can do this with:\n\nman ls\n\nYou can exit the manual by pressing q.\nIn case you want to check what a program does or what options there are, depending on the program there might be different ways how to do this. These most common ways are:\n\nman ls\nls --help\nls -h"
  },
  {
    "objectID": "source/bash_intro.html#cd-moving-around-folders",
    "href": "source/bash_intro.html#cd-moving-around-folders",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Most of the time you do not want to perform your analyses in the home directory but elsewhere. We can use the cd command to move around the file system.\nThe Unix file system is a hierarchical file system to organize files and directories. It is a tree-like structure that starts with a single directory called the root directory, which is denoted by a forward slash (/) character. All other files are “descendants” of root. To move from the root, we can go via the descendants to reach the john folder as follows: /users/john\n\n\n\nFor our analyses, we will move into any of the folders that we see listed after we have used ls -l. In my case I want to move into the source directory:\n\ncd source/\n\nIf you use pwd afterwards, then you should see that we moved into another directory.\nWe can also move back to our original directory using cd .., which will move the user up one directory (and move us out of the source and back into the home directory).\n\ncd ..\n\nWe can also move around multiple levels. In the example below, I am going into the source folder, then back to the home directory and then into the docs folder.\n\ncd source/../docs\n\nAnother useful way to move around quickly is using the tilde symbol, i.e. ~, which can be used as a shortcut to move directly into our home directory:\n\ncd ~\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\nExplore your current location with pwd and ls and move around with cd and try to get used to these three commands. If you are more comfortable, try finding your Deskop based on the tips in the section introducing pwd"
  },
  {
    "objectID": "source/bash_intro.html#mkdir-making-new-folders",
    "href": "source/bash_intro.html#mkdir-making-new-folders",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Now that we know how to explore our surroundings, let us make a new folder in which we start our data analysios. For this we use the mkdir command.\nTo do this, we will first move into our home directory and create a new folder and move into that folder as follows:\n\n#go into the folder from which you want to work (i.e. the home directory)\ncd ~\n\n#make a new folder (in the directory we currently are in, name it new_older)\nmkdir data_analysis\n\n#check if new folder was generated\nls\n\n#next we move into the newly generated folder\ncd data_analysis\n\n#check if we correctly changed our location\npwd\n\n\n\n\n\n\n\nTip: Command-line completion\n\n\n\n\n\nMost command-line interpreters allow to automatically fill in partially typed commands, file paths or file names.\nSo instead having to type out data_analysis completely when changing the directory, we can let the interpreter do the work for us.\nTo do this, start from the data_analysis folder and type cd data_ and press the Tab-key on your keyboard. The cli should have auto-completed the folder name automatically.\nIf there are multiple options, such as data and data_analysis, the cli can not autocomplete the folder name, however, by pressing Tab twice you will see all options to extend the name."
  },
  {
    "objectID": "source/bash_intro.html#wget-downloading-data",
    "href": "source/bash_intro.html#wget-downloading-data",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Next, let’s download our sequencing data into a new data folder. One way to do this is using the wget. In the command below we add the option -P to specify where to download the data:\n\n#make a folder for our downloads\nmkdir data\n\n#download a genome from ncbi using wget\nwget -P data https://github.com/ndombrowski/cli_workshop/raw/main/data/seq_project.tar.gz\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nCheck with ls if the file was downloaded correctly\nCheck the manual if there are extra options that we can use for ls to check the file size (advanced)\n\n\n\nClick me to see an answer\n\n\n#check if file was downloaded\nls -l data/\n\n#check file size\nls -lh data/seq_project.tar.gz"
  },
  {
    "objectID": "source/bash_intro.html#tar-working-with-tar-files",
    "href": "source/bash_intro.html#tar-working-with-tar-files",
    "title": "Introduction to Bash",
    "section": "",
    "text": "The data we downloaded is provided as a tar file:\n\ntar is short for Tape Archive, and sometimes referred to as tarball\nThe TAR file format is common in Unix and Unix-like systems when storing data\nTAR files are often compressed after being created and then become TGZ files, using the tgz, tar.gz, or gz extension.\n\nWe can decompress the data into our data folder as follows:\n\ntar -xvf data/seq_project.tar.gz -C data\n\nThe options we use are:\n\nx tells it to extract files from the archive\nv display verbose information and provide detailed information while creating the tarball\nf specify the file name\nC tells tar to change directory (so the package content will be unpacked there)\n\n\n\n\n\n\n\nTip: how to generate a tarball\n\n\n\n\n\nIf you ever want to generate a tarball you can do the following:\n\ntar -cvzf my_tarball.tar.gz folder_to_tar\n\nThe options we use are:\n\nc create an archive by bundeling files and directories together\nz use gzip compression when generating the tar file\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nAfter extracting the tarball use ls to explore the content we just downloaded\nFind the path to reach at least one sequence file. Hint, to make your life easier, check the Tip: Command-line completion above.\n\n\n\nClick me to see an answer\n\n\n#check the content of the dowloaded folder\nls -l data/seq_project\n\n#find a sequence file\nls -l data/seq_project/barcode001_User1_ITS_1_L001/"
  },
  {
    "objectID": "source/bash_intro.html#wildcards",
    "href": "source/bash_intro.html#wildcards",
    "title": "Introduction to Bash",
    "section": "",
    "text": "After exploring our folder, we have seen that data/seq_project contains 4 folders, 2 folders for different users who each generated two replicates.\nHowever, you might have also noticed that it gets tedious to figure out how many files are in each folder because we would need to run ls on each single folder and view its content individually.\nLuckily, the shell provides special characters to help you rapidly specify groups of filenames. Wild-cards are characters can be used as a substitute for any class of characters in a search.\nThe * wildcard is the wildcard with the broadest meaning of any of the wildcards, it can represent 0 characters, all single characters or any string of characters. I.e. we can list all files in our folders as follows:\n\n#list all files in every single folder that is found in seq_project\nls data/seq_project/*/\n\nSince we see that the sequencing files all end with .fastq.gz we can make this command a bit more specific and at the same time make the output a bit more readable:\n\n#list all files in every single folder that is found in seq_project\nls data/seq_project/*/*.gz\n\nNow we can easily see for each folder how many files we have.\n\n\n\n\n\n\nTip: More wildcards\n\n\n\n\n\n* is not the only wildcard we can use and a full list can be found here.\nDifferent wildcards can be useful in very different context, not only only listing files but also finding text in files. To make such searches as specific as possible there are different wildcards one can use. Some examples are listed below.\nThe [0-9] wildcard = matches any number exactly once and allows us to extract a range of files.\n\n#list only a\nls data/seq_project/barcode00[0-9]*/*.gz\n\nThe [012] wildcard = matches 1 or 2 exactly once and allows us to extract a range of files.\n\n#list only a\nls data/seq_project/barcode00[12]*/*.gz\n\n[A-Z] matches any letter in capitals occurring once [a-z]* matches any letter in non-capital letters occurring many times\n\n#list only a\nls data/seq_project/barcode001_User1_ITS_1_[A-Z]001/*.gz"
  },
  {
    "objectID": "source/bash_intro.html#gzip-decompressing-files",
    "href": "source/bash_intro.html#gzip-decompressing-files",
    "title": "Introduction to Bash",
    "section": "",
    "text": "After downloading and exploring the content of the downloads folder, you see that the file we downloaded ends with gz. This indicates that we work with a gzip-compressed file. Gzip is a tool used to (de)-compress the size of files.\nIn order to work with files, we sometimes need to de-compress them first. We can do this as follows (by using the decompress, -d argument):\n\n#decompress gz data (-d = decompress)\ngzip -d data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nAfter running gzip, check if we now have one uncompressed file by using ls\nUse ls with an option to also view the file size and compare the size of our compressed and uncompressed files.\n\n\n\nClick me to see an answer\n\n\n#check the content of the dowloaded folder\nls -l data/seq_project/*/*\n\n#compare the size of the different files\nls -lh data/seq_project/*/*\n\nWe see that our file has a file size of about ~25M after compression while the compressed files are around ~5M.\nWhen working with 16S amplicon sequencing files the data is usually much large and its best to keep the files compressed to not clutter your computer.\n\n\n\n\nTo keep have our files small its best to work with the compressed files. If we want to compress a file, we can do this as follows:\n\n#compress\ngzip data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq\n\n#check if that worked\nls data/seq_project/*/*"
  },
  {
    "objectID": "source/bash_intro.html#exploring-the-content-of-files",
    "href": "source/bash_intro.html#exploring-the-content-of-files",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Next, let’s view the content of our fastq files. Viewing the actual files we work with is often important to ensure the integrity of our data.\n\n\nOne very quick way to check the first 10 rows of any file is head. Let’s try this on one of our sequence files:\n\nhead data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n\nAfter running this command you will see a lot of random letters and numbers but nothing that looks like a sequence, what is going on?\n\n\n\nTo view the content of a compressed file and make sense of the content we need to first uncompress the file. However, sequence files tend to get rather large and we do not want to clutter the files.\nLuckily, there is one useful tool in bash to uncompress the file and print the content to the screen called zcat,\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n\nWhen running this we see the content of the whole file printed to the screen. This is a bit better but imagine doing this for a file with millions of sequences. In such a case we would not want to print the whole file to the screen but maybe only the first view rows.\n\n\n\nPipes are a powerful utility to connect multiple commands together. They allow us to feed the standard output of one command, such as zcat as input into another command such as head and as such combine multiple commands together:\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz | head\n\nAfter running this, we finally see a sequence and some other information. Notice that for fastq files we always should see 4 rows with information for each sequence:\n\n\n\n::: {.callout-caution collapse=“false” title=“Exercise”} 1. View the content of a file ending on R2 (i.e. one of the reverse reads) 2. Do you see a way how you could distinguish forward from reverse reads?\n\n\nClick me to see an answer\n\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | head\n\nR1 and R2 files have a different header, i.e. R1: 1:N:0:TGCTCGTAGT R2: 2:N:0:TGCTCGTAGT\nHowever, except this small distinction the headers from the two files should have exactly the same header.\n\n\n\n\nless is a program that lets you view a file’s contents one screen at a time. This is useful when dealing with a large text file because it doesn’t load the entire file but accesses it page by page, resulting in fast loading speeds.\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | less -S\n\nOnce opened, less will display the text file one page at a time.\n\nYou can use the arrow Up and Page arrow keys to move through the text file\nTo exit less, type q"
  },
  {
    "objectID": "source/bash_intro.html#wc-with-how-much-data-do-we-work",
    "href": "source/bash_intro.html#wc-with-how-much-data-do-we-work",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Another useful tool is the wc (= wordcount) command and allow us to count the number of lines in a file. As such it is an easy tool for sanity checking and here allows us to count how many sequences we work with:\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | wc -l\n\nAfter running this we see that we work with 179,384 / 4 sequences. We divide by 4 since each sequence is represented by 4 lines of information in our fastq file.\n\n\n\n\n\n\nTip: Avanced: better counting\n\n\n\n\n\nWe have seen that we need to divide the output of wc by four to get the total number of sequences. We can do this with a calculator but actually, some intermediate bash can also be used to do this for us:\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | echo $((`wc -l`/4))\n\nIn the command above we have some new syntax echo $((wc -l/4))\n\nThe echo command is used to display messages or print information to the terminal. In our case it will print whatever is going on in this section $((wc -l/4))\n$((...)): This is an arithmetic expansion in Bash. It allows you to perform arithmetic operations and substitute the result into the command line.\nThe backticks (``) around wc -l indicate command substitution. This means that the wc -l command is executed, and its output (the number of lines counted) is used in the overall command. Without command substitution (wc -l alone), you would not capture the output; instead, you would only see the literal text “wc -l”. Command substitution allows you to use the actual result of the command.\n/4: This is dividing the result obtained from wc -l by 4. Since each sequence in a FASTQ file is represented by four lines (identifier, sequence, separator, and quality scores), dividing the total number of lines by 4 gives the number of sequences."
  },
  {
    "objectID": "source/bash_intro.html#for-loops",
    "href": "source/bash_intro.html#for-loops",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Imagine we want to count the lines not only on one but all lines, could we do something like this?\n\nzcat data/seq_project/*/*.gz | wc -l\n\nThis prints a single number, 869 944, but not the counts for each file, so something did not work right.\nThe problem with this command is that it prints the text from all 8 fastq files and only then performs the counting. However, what we want to do is to repeat the same operation over and over again:\n\nDecompress a first file\nCount the lines in the first file\nDecompress a second file\nCount the lines in the first file\n…\n\nA for loop is a bash programming language statement which allows code to be repeatedly executed. I.e. it allows us to run a command 2, 3, 5 or 100 times.\nLet’s start with a simple example:\n\nfor i in 1 2 3; do echo \"Welcome ${i} times\"; done\n\nWe see that Welcome ... is printed 3 times. To do this we used a new command, echo, which is used to print information to the terminal. Here, you see what this command does step by step:\n\n\n\nLet’s try to do the same but for our files by storing the individual files found in data/seq_project/*/*.gz in the variable i and print i.\n\nfor i in data/seq_project/*/*.gz; do echo ${i}; done\n\n\nfor i in data/seq_project/*/*.gz; do: This part initializes a loop that iterates over all files matching the pattern data/seq_project/*/*.gz. The variable i is assigned each file in succession.\n\nWe can then use these variables, step-by-step, and read them into zcat followed by wc -l:\n\nfor i in data/seq_project/*/*.gz; do zcat ${i} | wc -l; done\n\n\nzcat ${i} | wc -l: This is the action performed inside the loop. zcat is used to concatenate and display the content of compressed files (*.gz). The | (pipe) symbol redirects this output to wc -l, which counts the number of lines in the uncompressed content.\n\nSince this easily can get rather long you could also break down the code into several lines for better readability:\n\nfor i in data/seq_project/*/*.gz; do \n    zcat ${i} | wc -l\ndone\n\nSometimes it is useful to not store the full path in i, especially when we want to store the output of our loop in a new file. Luckily, we can use the list of files we stored in fastq_files.txt to rewrite this command a bit:\n\nfor i in `cat fastq_files.txt`; do  \n    zcat data/seq_project/*/${i} | wc -l\ndone\n\n\nfor i in `cat fastq_files.txt`; do: This initiates a loop that iterates over each item in the file fastq_files.txt. The backticks ` are used to execute the command within and assign its output to the variable i.\nzcat data/seq_project/*/${i} | wc -l: Like before, this line uncompresses (zcat) and counts the number of lines in the specified file. However, in this case, the file is determined by the content of fastq_files.txt, which contains a list of file names.\n\nWe can also easily store the output in a file by redirecting the output and using our variable i to name the files appropriately.\n\n#generate a new folder to store these files\nmkdir counts \n\nfor i in `cat fastq_files.txt`; do \n    zcat data/seq_project/*/$i | wc -l &gt; counts/${i}.txt\ndone\n\n#check if files were generated \nls counts/*txt \n\n#view content of file \nhead counts/Sample-DUMMY1_R1.fastq.gz.txt\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nUse a foor loop to generate two lists lists with the paths to our sequencing data. Generate one file for each user.\n\n\n\nClick me to see an answer\n\n\nfor i in User1 User2; do \n    ls data/seq_project/*$i*/* &gt; file_${i}.txt\ndone\n\n\n\n\n\n\n\n\n\n\n\nTip: Avanced: better counting in for loops\n\n\n\n\n\nLet’s get a bit more advanced to show you some powerful features of bash. For this imagine that you would do this for 100 files. In this case it would be useful to see the file names next to the counts. We can achieve this by using what we have learned in the Better counting tip where we have learned about echo and command substitution.\n\nfor i in data/seq_project/*/*.gz; do \n    echo \"$i: $(zcat $i | wc -l)\"\ndone\n\n\nThe echo command is used to display messages or print information to the terminal. In our case it will print whatever is going on here \"$i: $(zcat $i | wc -l)\"\n$(...): These parentheses are used for command substitution. It means that the command zcat $i | wc -l is executed, and its output (the line count of the uncompressed content) is substituted in that position.\nThe double quotes (““) perform what is called a string concatenation. It concatenates the filename ($i), a colon (:), a space, and the line count obtained from the command substitution. The entire string is then passed as a single argument to the echo command.\n\nAlmost perfect, now we only want to divide this by 4:\n\nfor i in data/seq_project/*/*.gz; do \n    echo \"$i: $(( $(zcat $i | wc -l) /4 ))\"\ndone\n\nNotice, how we use first single brackets and then double brackets?\n\n$((...)) in contrast to $(...) is an arithmetic expansion in Bash. It allows you to perform arithmetic operations and substitute the result into the command line."
  },
  {
    "objectID": "source/bash_intro.html#io-redirection-to-new-files",
    "href": "source/bash_intro.html#io-redirection-to-new-files",
    "title": "Introduction to Bash",
    "section": "",
    "text": "By using some special notations we can redirect the output of many commands to files, devices, and even to the input of other commands.\nWe have seen by now that by default many tools direct their standard output to the display. For example, when we use ls the list of files and folders is printed to the screen. However, we can also redirect the standard output to a file by using the &gt; character.\nFor example, we might want to generate a list with all fastq files:\n\n#redirect the output from ls to a new file\nls data/seq_project/*/* &gt; fastq_paths.txt"
  },
  {
    "objectID": "source/bash_intro.html#exploring-the-content-of-text-files",
    "href": "source/bash_intro.html#exploring-the-content-of-text-files",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Next, let’s view the content of the list we just generated. Viewing the actual files we work with is often important to ensure the integrity of our data.\n\n\nhead can be used to check the first 10 rows of our files;\n\nhead fastq_paths.txt\n\n\n\n\nIf you want to check the last 10 rows use tail\n\ntail fastq_paths.txt\n\n\n\n\nless is a program that lets you view a file’s contents one screen at a time. This is useful when dealing with a large text file because it doesn’t load the entire file but accesses it page by page, resulting in fast loading speeds.\n\nless -S fastq_paths.txt\n\nOnce opened, less will display the text file one page at a time.\n\nYou can use the arrow Up and Page arrow keys to move through the text file\nTo exit less, type q\n\n\n\n\ncat can do different things:\n\nCreate new files\nDisplay the content of a file\nConcatenate, i.e. combine, several files\n\nTo view files we can do:\n\ncat fastq_paths.txt\n\nTo combine files we do:\n\n#combine files \ncat fastq_paths.txt fastq_files.txt &gt; combined_files.txt\n\n#view new file \ncat combined_files.txt\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nUsing wildcards and cat, combine all R1 files into one file\nUse ls to judge the file size of the individual R1 files and the combined file to assess whether everything worked correctly\n\n\n\nClick me to see an answer\n\n\n#combine files\ncat data/seq_project/*/*R1.fastq.gz &gt; combined.fastq.gz\n\n#view size individual files\nls -lh data/seq_project/*/*R1.fastq.gz\n\n#view size new file \nls -lh combined.fastq.gz"
  },
  {
    "objectID": "source/bash_intro.html#exploring-the-content-of-compressed-fastq-files",
    "href": "source/bash_intro.html#exploring-the-content-of-compressed-fastq-files",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Exercise\n\n\n\n\n\n\nView the first few rows of one of the fastq.gz files\nDoes this look like a normal sequence file to you?\n\n\n\nClick me to see an answer\n\n\nhead data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n\nAfter running this command you will see a lot of random letters and numbers but nothing that looks like a sequence, so what is going on?\n\n\n\n\n\n\nTo view the content of a compressed file and make sense of the content we need to first uncompress the file. However, sequence files tend to get rather large and we do not want to clutter the files.\nLuckily, there is one useful tool in bash to uncompress the file and print the content to the screen called zcat,\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz\n\nWhen running this we see the content of the whole file printed to the screen. This is a bit better but imagine doing this for a file with millions of sequences. In such a case we would not want to print the whole file to the screen but maybe only the first view rows.\n\n\n\nPipes are a powerful utility to connect multiple commands together. They allow us to feed the standard output of one command, such as zcat as input into another command such as head and as such combine multiple commands together:\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R1.fastq.gz | head\n\nAfter running this, we finally see a sequence and some other information. Notice that for fastq files we always should see 4 rows with information for each sequence:\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nView the content of a file ending on R2 (i.e. one of the reverse reads)\nDo you see a way how you could distinguish forward from reverse reads?\n\n\n\nClick me to see an answer\n\n\nzcat data/seq_project/barcode001_User1_ITS_1_L001/Sample-DUMMY1_R2.fastq.gz | head\n\nR1 and R2 files have a different header, i.e.\n\nR1: 1:N:0:TGCTCGTAGT\nR2: 2:N:0:TGCTCGTAGT\n\nHowever, except this small distinction the headers from the two files should have exactly the same header."
  },
  {
    "objectID": "source/bash_intro.html#cut-extracting-sections-from-tables",
    "href": "source/bash_intro.html#cut-extracting-sections-from-tables",
    "title": "Introduction to Bash",
    "section": "",
    "text": "This will list the full path, but what if we only wanted to list the file name?\nThere are different ways to do this, but cut allows us to separate columns using any delimiter, for example the / we use to separate folders. To ensure that / is seen a separator we use the -d option and with -f4 we tell cut to print the fourt element of each separated field.\n\n#view content of the file we work with \nhead fastq_paths.txt\n\n#only extract the file name (i.e. the fourth field when using a / separator)\ncut -f4 -d \"/\" fastq_paths.txt\n\n#store this in a new file\ncut -f4 -d \"/\" fastq_paths.txt &gt; fastq_files.txt"
  }
]