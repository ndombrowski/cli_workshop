[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to the cli",
    "section": "",
    "text": "On this website you will find a short tutorial that will provide guidance in how to use bash and the command line interface.\nThe first few pages called Setting up a terminal and Documenting your code will provide some help in installing a terminal and document your code.\nAfterwards, the actual tutorial will begin, in which we will download some sequencing data and work learn how to explore the data using bash, Specifically,we will learn the following in two sections:\n\nSection 1 can be followed on your own computer and will guide you through the following steps:\n\nLocating what directory we are working and what files are in the folder we are working in\nMoving around the filesystem\nGenerating new folders\nDownloading example data\nExplore the content of compressed sequence files\nGenerating new files\nViewing (and editing) files\nExploring sequence files and finding patterns inside\nCombining multiple files into one\n\nSection 2 will introduce how to use an HPC. This section is specifically designed for users working at the University of Amsterdam (UvA). This section will guide you through the following steps:\n\nGetting access to the UvA Crunchomics HPC\nLearning about what an HPC can be used for\nLogging into an HPC\nUploading (and downloading) files\nSubmitting job via slurm part1 in which we use pre-installed software to explore sequence quality\nInstalling the seqkit software that is not pre-installed using conda\nSubmit a job via slurm part 2 in which we use conda installed software to the number of reads in our sequence files\n\n\nFinally, there will be an optional section with more advanced material that is giving a pre-view into what else you can do with the command line. Here, you find information about:\n\nsed and awk that can be used to manipulate large + numerous files\ngit + github + zenodo that are useful for sharing code + data\nHow to access the Crunchomics application server to use Rstudio\n\n\nTo do:\n\nWork on tutorial pages\nDownload of current example data takes 8 min (reduce size)\nGet familiar with Mobaxterm\nGet familiar with FileZila (added notes in the surf documentation)\n\nMobaxterm\n\nDownload\nStart local terminal\nYou should not store anything in MobaXterm HOME directory (/home/mobaxterm): with your current settings, this folder is not “persistent”, so it will be cleared at each MobaXterm restart. If you want to set a “persistent” HOME directory which will not be cleared at each MobaXterm startup, go to MobaXterm settings window and choose a folder in which to store MobaXterm home files.\nInstall nano with apt install nano"
  },
  {
    "objectID": "index.html#welcome-page",
    "href": "index.html#welcome-page",
    "title": "Introduction to the cli",
    "section": "",
    "text": "On this website you will find a short tutorial that will provide guidance in how to use bash and the command line interface.\nThe first few pages called Setting up a terminal and Documenting your code will provide some help in installing a terminal and document your code.\nAfterwards, the actual tutorial will begin, in which we will download some sequencing data and work learn how to explore the data using bash, Specifically,we will learn the following in two sections:\n\nSection 1 can be followed on your own computer and will guide you through the following steps:\n\nLocating what directory we are working and what files are in the folder we are working in\nMoving around the filesystem\nGenerating new folders\nDownloading example data\nExplore the content of compressed sequence files\nGenerating new files\nViewing (and editing) files\nExploring sequence files and finding patterns inside\nCombining multiple files into one\n\nSection 2 will introduce how to use an HPC. This section is specifically designed for users working at the University of Amsterdam (UvA). This section will guide you through the following steps:\n\nGetting access to the UvA Crunchomics HPC\nLearning about what an HPC can be used for\nLogging into an HPC\nUploading (and downloading) files\nSubmitting job via slurm part1 in which we use pre-installed software to explore sequence quality\nInstalling the seqkit software that is not pre-installed using conda\nSubmit a job via slurm part 2 in which we use conda installed software to the number of reads in our sequence files\n\n\nFinally, there will be an optional section with more advanced material that is giving a pre-view into what else you can do with the command line. Here, you find information about:\n\nsed and awk that can be used to manipulate large + numerous files\ngit + github + zenodo that are useful for sharing code + data\nHow to access the Crunchomics application server to use Rstudio\n\n\nTo do:\n\nWork on tutorial pages\nDownload of current example data takes 8 min (reduce size)\nGet familiar with Mobaxterm\nGet familiar with FileZila (added notes in the surf documentation)\n\nMobaxterm\n\nDownload\nStart local terminal\nYou should not store anything in MobaXterm HOME directory (/home/mobaxterm): with your current settings, this folder is not “persistent”, so it will be cleared at each MobaXterm restart. If you want to set a “persistent” HOME directory which will not be cleared at each MobaXterm startup, go to MobaXterm settings window and choose a folder in which to store MobaXterm home files.\nInstall nano with apt install nano"
  },
  {
    "objectID": "source/installation.html",
    "href": "source/installation.html",
    "title": "Setting up a terminal",
    "section": "",
    "text": "The Linux command-line interface (CLI) is an alternative to a graphical user interface (GUI) with which you are likely more familiar. Both interfaces allow a user to interact with an operating system. The key difference between the CLI and GUI is that the interaction with CLI is based on issuing commands. In contrast, the interaction with a GUI involves visual elements, such as windows, buttons, etc. CLI is often also referred to as the shell, terminal, console, prompt or various other names\nBash is a type of interpreter that processes shell commands. A shell interpreter takes commands in plain text format and calls the operating system to do something, for example changing a directory or modifying the content of some files. Bash itself stands for Bourne Again Shell and it is one of the popular command-line shells used to run other programs, many of which are useful for bioinformatic workflows.\n\n\n\n\n\nThe default shell is usually Bash and there is usually no need to install anything to be able to follow this tutorial. On most versions of Linux, th shell accessible by running the Gnome Terminal or KDE Konsole or xterm, which can be found via the applications menu or the search bar. If your machine is set up to use something other than Bash, you can run it by opening a terminal and typing bash.\n\n\n\nFor Mac running macOS Mojave or earlier releases, the default Unix Shell is Bash. For a Mac computer running macOS Catalina or later releases, the default Unix Shell is Zsh. To open a terminal, try one or both of the following:\n\nIn Finder, select the Go menu, then select Utilities. Locate Terminal in the Utilities folder and open it.\nUse the Mac ‘Spotlight’ computer search function. Search for: Terminal and press Return.\n\nTo ensure that we work with a consistent shell and to check if your machine is set up to use something other than Bash, type echo $SHELL in your terminal window.\nIf your machine is set up to use something other than Bash, you can try switching to Bash by opening a terminal and typing bash. To check if that worked type echo $SHELL again.\n\n\n\nOperating systems like macOS and Linux come with a native command-line terminal, making it straightforward to run bash commands. However, for Windows users you need to install some software first to be able to use bash, below you find three options:\nOne option to access the bash shell commands is using Git Bash, for detailed installation instructions please have a look at the carpenties website.\nA second option is Mobaxterm, which enables Windows users to execute basic Linux/Unix commands on their local machine, connect to an HPC with SSH and to transfer files with SCP/SFTP (more on that later). Installation instructions can be found here.\nA final option is to use Windows and Linux at the same time on a Windows machine. The Windows Subsystem for Linux (WSL2) lets users install a Linux distribution (such as Ubuntu, which is the default Linux distribution, which we recommend to use) and use Linux applications, utilities, and Bash command-line tools directly on Windows. This option allows you to use all the tools available but since you more or less are installing a separating system on your PC needs to have enough memory to run this. Installation instructions can be found here.\n\n\n\n\n\n\nNote\n\n\n\nI am myself mostly familiar with WSL and the following tutorial is tailored towards the location of things when using WSL and Linux and your folder structure might be slightly different when using Git Bash or Mobaxterm.\nSimilarly, I am mainly familiar with the bash not the zsh shell. For Mac users that have a newer MAC and have trouble switching to bash this might create some issues when using wildcards.\nFor both issues: If parts of the tutorial do not work for you due to that, feel free to contact me and I can adjust the tutorial accordingly.\n\n\n\n\n\n\nAfter you set everything up and opened a terminal you should see something like this and are good to go if you want to follow the tutorial:"
  },
  {
    "objectID": "source/installation.html#terminology",
    "href": "source/installation.html#terminology",
    "title": "Setting up a terminal",
    "section": "",
    "text": "The Linux command-line interface (CLI) is an alternative to a graphical user interface (GUI) with which you are likely more familiar. Both interfaces allow a user to interact with an operating system. The key difference between the CLI and GUI is that the interaction with CLI is based on issuing commands. In contrast, the interaction with a GUI involves visual elements, such as windows, buttons, etc. CLI is often also referred to as the shell, terminal, console, prompt or various other names\nBash is a type of interpreter that processes shell commands. A shell interpreter takes commands in plain text format and calls the operating system to do something, for example changing a directory or modifying the content of some files. Bash itself stands for Bourne Again Shell and it is one of the popular command-line shells used to run other programs, many of which are useful for bioinformatic workflows."
  },
  {
    "objectID": "source/installation.html#installation-guides",
    "href": "source/installation.html#installation-guides",
    "title": "Setting up a terminal",
    "section": "",
    "text": "The default shell is usually Bash and there is usually no need to install anything to be able to follow this tutorial. On most versions of Linux, th shell accessible by running the Gnome Terminal or KDE Konsole or xterm, which can be found via the applications menu or the search bar. If your machine is set up to use something other than Bash, you can run it by opening a terminal and typing bash.\n\n\n\nFor Mac running macOS Mojave or earlier releases, the default Unix Shell is Bash. For a Mac computer running macOS Catalina or later releases, the default Unix Shell is Zsh. To open a terminal, try one or both of the following:\n\nIn Finder, select the Go menu, then select Utilities. Locate Terminal in the Utilities folder and open it.\nUse the Mac ‘Spotlight’ computer search function. Search for: Terminal and press Return.\n\nTo ensure that we work with a consistent shell and to check if your machine is set up to use something other than Bash, type echo $SHELL in your terminal window.\nIf your machine is set up to use something other than Bash, you can try switching to Bash by opening a terminal and typing bash. To check if that worked type echo $SHELL again.\n\n\n\nOperating systems like macOS and Linux come with a native command-line terminal, making it straightforward to run bash commands. However, for Windows users you need to install some software first to be able to use bash, below you find three options:\nOne option to access the bash shell commands is using Git Bash, for detailed installation instructions please have a look at the carpenties website.\nA second option is Mobaxterm, which enables Windows users to execute basic Linux/Unix commands on their local machine, connect to an HPC with SSH and to transfer files with SCP/SFTP (more on that later). Installation instructions can be found here.\nA final option is to use Windows and Linux at the same time on a Windows machine. The Windows Subsystem for Linux (WSL2) lets users install a Linux distribution (such as Ubuntu, which is the default Linux distribution, which we recommend to use) and use Linux applications, utilities, and Bash command-line tools directly on Windows. This option allows you to use all the tools available but since you more or less are installing a separating system on your PC needs to have enough memory to run this. Installation instructions can be found here.\n\n\n\n\n\n\nNote\n\n\n\nI am myself mostly familiar with WSL and the following tutorial is tailored towards the location of things when using WSL and Linux and your folder structure might be slightly different when using Git Bash or Mobaxterm.\nSimilarly, I am mainly familiar with the bash not the zsh shell. For Mac users that have a newer MAC and have trouble switching to bash this might create some issues when using wildcards.\nFor both issues: If parts of the tutorial do not work for you due to that, feel free to contact me and I can adjust the tutorial accordingly."
  },
  {
    "objectID": "source/installation.html#sanity-check",
    "href": "source/installation.html#sanity-check",
    "title": "Setting up a terminal",
    "section": "",
    "text": "After you set everything up and opened a terminal you should see something like this and are good to go if you want to follow the tutorial:"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "Introduction to the cli",
    "section": "",
    "text": "tba"
  },
  {
    "objectID": "readme.html#title",
    "href": "readme.html#title",
    "title": "Introduction to the cli",
    "section": "",
    "text": "tba"
  },
  {
    "objectID": "source/code_documentation.html",
    "href": "source/code_documentation.html",
    "title": "Introduction to the cli",
    "section": "",
    "text": "Documenting your code is crucial for both your future self and anyone else who might work with your code. Documentation serves as a roadmap for your code. It helps others (and your future self) understand the purpose, functionality, and usage of your code.\nA Guide to Reproducible Code in Ecology and Evolution gives detailed information on how to organize project folders and how to write clear and reproducible code. The examples are mainly based on R code but most are general enough to apply to other computational langauges (and scientific disciplines).\nIf you want to see an example for documented code, check out [this example file]tba. The example file is a markdown file (qmd) generated with VSCode. Some examples for text editors to use can be found below.\n\n\n\n\n\n\nNote\n\n\n\nThe information in this section is not part of the actual tutorial but was added to give you a starting point for how to document your code.\nIf you follow the in-person tutorial it is best to record your notes using a plain text editor but feel free to explore the more advanced options after the tutorial.\n\n\n\n\n\n\n\nWhen documenting code, its best to avoid visual editors, such as word, as they are not designed for writing code and easily destroy the formating by for example changing ` to ’, which when writing code is quite a big difference.\nInstead you can use a plain text editor, such as TextEdit (Mac) or Notepad (Windows). This is the easiest to get started but you will loose some functionality, such as adding headers or writing text in bold.\nAlternatives, that offer more functionality, are for example RStudio or VScode.\n\n\n\nRMarkdown is an extension of Markdown that allows you to integrate R code directly into your documentation.\nIf you have not install R and Rstudio, follow these instructions.\nIn RStudio you can create an R Markdown File by:\n\nIn RStudio, go to File -&gt; New File -&gt; R Markdown\nChoose a title, author, and output format\nKnit the Document:\n\nClick the “Knit” button to render your R Markdown document into the chosen output format.\n\n\nFor more information visit the RMarkdown tutorial.\n\n\n\nQuarto is an alternative to RMarkdown for creating dynamic documents in RStudio but can be read by other editors, such as VScode. Compared to RMarkdown it provides enhanced features for document creation and includes many more built in output formats (and many more options for customizing each format).\nIt is installed by default on newer R installations.\n\nIn RStudio, go to File -&gt; New File -&gt; Quarto document\nChoose a title, author, and output format\nRender the Document:\n\nClick the “Render” button to render your R Markdown document into the chosen output format.\n\n\nFor more information (and more functionality) visit the Quarto website.\n\n\n\nVisual Studio Code (VSCode) is a versatile and user-friendly code editor. It provides excellent support for various programming languages, extensions, and a built-in terminal but might take a bit of work to setup to work with different compuational languages.\n\nInstallation:\n\nDownload and install VSCode from here.\n\nExtensions:\n\nInstall extensions relevant to your programming language (e.g., Python, R). These extensions enhance code highlighting and provide additional features.\n\n\n\n\n\n\nMarkdown is a lightweight markup language that’s easy to read and write. It allows you to add formatting elements to plain text documents.\nHeaders:\nUse # for headers. The more # symbols, the smaller the header. When writing a header make sure to always put a space between the # and the header name.\n# Main Header\n## Subheader\nLists:\nUse - or * for unordered lists and numbers for ordered lists.\nOrdered lists are created by using numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one.\n1. First item\n2. Second item\n3. Third item\n4. Fourth item \n1. First item\n2. Second item\n3. Third item\n    1. Indented item\n    2. Indented item\n4. Fourth item \nUnordered lists are created using dashes (-), asterisks (*), or plus signs (+) in front of line items. Indent one or more items to create a nested list.\n- First item\n- Second item\n- Third item\n- Fourth item \n - First item\n- Second item\n- Third item\n    - Indented item\n    - Indented item\n- Fourth item \nYou can also combine ordered with unordered lists:\n1. First item\n2. Second item\n3. Third item\n    - Indented item\n    - Indented item\n4. Fourth item\nCode Blocks:\nEnclose code snippets in triple backticks.\n```bash\ngrep \"control\" downloads/Experiment1.txt\n```\nLinks:\nCreate links to external resources or within your documentation.\n[Link Text](https://www.example.com)\nEmphasis:\nUse * or _ for italic and ** or __ for bold.\n*italic*\n**bold**\nPictures\nYou can easily add images to your documentation as well:\n![Alt Text](path/to/your/image.jpg)\nHere, replace Alt Text with a descriptive alternative text for your image, and path/to/your/ifrom spamage.jpg with the actual path or URL of your image.\nTables\nTables can be useful for organizing information. Here’s a simple table:\n| Header 1 | Header 2 |\n| ---------| ---------|\n| Content 1| Content 2|\n| Content 3| Content 4|"
  },
  {
    "objectID": "source/code_documentation.html#documenting-code",
    "href": "source/code_documentation.html#documenting-code",
    "title": "Introduction to the cli",
    "section": "",
    "text": "Documenting your code is crucial for both your future self and anyone else who might work with your code. Documentation serves as a roadmap for your code. It helps others (and your future self) understand the purpose, functionality, and usage of your code.\nA Guide to Reproducible Code in Ecology and Evolution gives detailed information on how to organize project folders and how to write clear and reproducible code. The examples are mainly based on R code but most are general enough to apply to other computational langauges (and scientific disciplines).\nIf you want to see an example for documented code, check out [this example file]tba. The example file is a markdown file (qmd) generated with VSCode. Some examples for text editors to use can be found below.\n\n\n\n\n\n\nNote\n\n\n\nThe information in this section is not part of the actual tutorial but was added to give you a starting point for how to document your code.\nIf you follow the in-person tutorial it is best to record your notes using a plain text editor but feel free to explore the more advanced options after the tutorial."
  },
  {
    "objectID": "source/code_documentation.html#choose-your-editor",
    "href": "source/code_documentation.html#choose-your-editor",
    "title": "Introduction to the cli",
    "section": "",
    "text": "When documenting code, its best to avoid visual editors, such as word, as they are not designed for writing code and easily destroy the formating by for example changing ` to ’, which when writing code is quite a big difference.\nInstead you can use a plain text editor, such as TextEdit (Mac) or Notepad (Windows). This is the easiest to get started but you will loose some functionality, such as adding headers or writing text in bold.\nAlternatives, that offer more functionality, are for example RStudio or VScode.\n\n\n\nRMarkdown is an extension of Markdown that allows you to integrate R code directly into your documentation.\nIf you have not install R and Rstudio, follow these instructions.\nIn RStudio you can create an R Markdown File by:\n\nIn RStudio, go to File -&gt; New File -&gt; R Markdown\nChoose a title, author, and output format\nKnit the Document:\n\nClick the “Knit” button to render your R Markdown document into the chosen output format.\n\n\nFor more information visit the RMarkdown tutorial.\n\n\n\nQuarto is an alternative to RMarkdown for creating dynamic documents in RStudio but can be read by other editors, such as VScode. Compared to RMarkdown it provides enhanced features for document creation and includes many more built in output formats (and many more options for customizing each format).\nIt is installed by default on newer R installations.\n\nIn RStudio, go to File -&gt; New File -&gt; Quarto document\nChoose a title, author, and output format\nRender the Document:\n\nClick the “Render” button to render your R Markdown document into the chosen output format.\n\n\nFor more information (and more functionality) visit the Quarto website.\n\n\n\nVisual Studio Code (VSCode) is a versatile and user-friendly code editor. It provides excellent support for various programming languages, extensions, and a built-in terminal but might take a bit of work to setup to work with different compuational languages.\n\nInstallation:\n\nDownload and install VSCode from here.\n\nExtensions:\n\nInstall extensions relevant to your programming language (e.g., Python, R). These extensions enhance code highlighting and provide additional features."
  },
  {
    "objectID": "source/code_documentation.html#markdown-for-documentation",
    "href": "source/code_documentation.html#markdown-for-documentation",
    "title": "Introduction to the cli",
    "section": "",
    "text": "Markdown is a lightweight markup language that’s easy to read and write. It allows you to add formatting elements to plain text documents.\nHeaders:\nUse # for headers. The more # symbols, the smaller the header. When writing a header make sure to always put a space between the # and the header name.\n# Main Header\n## Subheader\nLists:\nUse - or * for unordered lists and numbers for ordered lists.\nOrdered lists are created by using numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one.\n1. First item\n2. Second item\n3. Third item\n4. Fourth item \n1. First item\n2. Second item\n3. Third item\n    1. Indented item\n    2. Indented item\n4. Fourth item \nUnordered lists are created using dashes (-), asterisks (*), or plus signs (+) in front of line items. Indent one or more items to create a nested list.\n- First item\n- Second item\n- Third item\n- Fourth item \n - First item\n- Second item\n- Third item\n    - Indented item\n    - Indented item\n- Fourth item \nYou can also combine ordered with unordered lists:\n1. First item\n2. Second item\n3. Third item\n    - Indented item\n    - Indented item\n4. Fourth item\nCode Blocks:\nEnclose code snippets in triple backticks.\n```bash\ngrep \"control\" downloads/Experiment1.txt\n```\nLinks:\nCreate links to external resources or within your documentation.\n[Link Text](https://www.example.com)\nEmphasis:\nUse * or _ for italic and ** or __ for bold.\n*italic*\n**bold**\nPictures\nYou can easily add images to your documentation as well:\n![Alt Text](path/to/your/image.jpg)\nHere, replace Alt Text with a descriptive alternative text for your image, and path/to/your/ifrom spamage.jpg with the actual path or URL of your image.\nTables\nTables can be useful for organizing information. Here’s a simple table:\n| Header 1 | Header 2 |\n| ---------| ---------|\n| Content 1| Content 2|\n| Content 3| Content 4|"
  },
  {
    "objectID": "source/bash_intro.html",
    "href": "source/bash_intro.html",
    "title": "Introduction to Bash",
    "section": "",
    "text": "After installing the terminal, let’s orient ourselves by typing our first command, pwd, into the terminal and pressing enter. pwd prints the location of the current working directory and basically tells you where exactly you are.\nWhen we login we start from what is called our home directory.\n\npwd\n\n\n\n\n\n\n\nTip: finding the desktop on different user systems\n\n\n\n\n\nYour home directory will be something like /Users/YourUserName but might be slightly different depending on your operating system. Below you find some help to orient yourself better for different terminal interfaces:\nFor MAC users:\n\nThe home directory should be /Users/YourUserName\nTo access the current folder in Finder you can try using open .\nYour desktop should be here /Users/YourUserName/Desktop\n\nFor Mobaxterm users:\n\nYour home directory is /home/mobaxterm\nBy default this home directory is in the Temp folder, which gets deleted evertime you exit Mobaxterm, To give this a persistent home, do the following:\n\nSettings –&gt; Configuration –&gt; General\nIn there set Persistent home directory to a folder of your choice\n\nTo access the file explorer and get used to where you are you can type explorer.exe .\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\nFor WSL2 users:\n\nThe home directory is /home/YourUserName\nTo access the file explorer and get used to where you are you can type explorer.exe .\nYou see that the Ubuntu environment is launched separated from your Windows environment\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\n\n\n\n\n\n\nNow that we know where we are, let’s see how to move around by first seeing what files and folders exist in our home directory. For this we can use the ls command, which stands for list directory contents:\n\nls\n\nIn my case this returns something like this:\n\n\n\nThis might look a bit different for your system in terms of color for file/folder names but what we basically see are the files (in bold text) and folders (green-highlighted text).\n\n\n\nSince this can easily become over-whelming if we deal with a lot of files and folders, lets look a bit closer into how we can optimize our commands.\nLet´s start with looking at the general structure of a command:\n\n\n\nNow, let’s look a bit closer into the ls command and use it with an option -l, an option we can use that makes ls use a long listing format.\n\nls -l\n\nAfter running this, we should see our files and folders but in what is called the long format (which gives more detailed information and structures our output a bit better):\n\n\n\nIf you are unsure what options come with a program its always a good idea to check out the manual. You can do this with:\n\nman ls\n\nYou can exit the manual by pressing q.\nIn case you want to check what a program does or what options there are, depending on the program there might be different ways how to do this. These most common ways are:\n\nman ls\nls --help\nls -h\n\n\n\n\nMost of the time you do not want to perform your analyses in the home directory but elsewhere. We can use the cd command to move around the file system.\nThe Unix file system is a hierarchical file system to organize files and directories. It is a tree-like structure that starts with a single directory called the root directory, which is denoted by a forward slash (/) character. All other files are “descendants” of root. To move from the root, we can go via the descendants to reach the john folder as follows: /users/john\n\n\n\nFor our analyses, we will move into any of the folders that we see listed after we have used ls -l. In my case I want to move into the source directory:\n\ncd source/\n\nIf you use pwd afterwards, then you should see that we moved into another directory.\nWe can also move back to our original directory using cd .., which will move the user up one directory (and move us out of the source and back into the home directory).\n\ncd ..\n\nWe can also move around multiple levels. In the example below, I am going into the source folder, then back to the home directory and then into the docs folder.\n\ncd source/../docs\n\nAnother useful way to move around quickly is using the tilde symbol, i.e. ~, which can be used as a shortcut to move directly into our home directory:\n\ncd ~\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\nExplore your current location with pwd and ls and move around with cd and try to get used to these three commands. If you are more comfortable, try finding your Deskop based on the tips in the section introducing pwd"
  },
  {
    "objectID": "source/bash_intro.html#introduction-to-bash",
    "href": "source/bash_intro.html#introduction-to-bash",
    "title": "Introduction to the cli",
    "section": "",
    "text": "After installing the terminal, let’s orient ourselves by typing our first command, pwd, into the terminal and pressing enter. pwd prints the location of the current working directory and basically tells you where exactly you are.\nWhen we login we start from what is called our home directory.\n\npwd\n\n\n\n\n\n\n\nTip: finding the desktop on different user systems\n\n\n\n\n\nYour home directory will be something like /Users/YourUserName but might be slightly different depending on your operating system. Below you find some help to orient yourself better for different terminal interfaces:\nFor MAC users:\n\nThe home directory should be /Users/YourUserName\nTo access the current folder in Finder you can try using open .\nYour desktop should be here /Users/YourUserName/Desktop\n\nFor Mobaxterm users:\n\nYour home directory is /home/mobaxterm\nBy default this home directory is in the Temp folder, which gets deleted evertime you exit Mobaxterm, To give this a persistent home, do the following:\n\nSettings –&gt; Configuration –&gt; General\nIn there set Persistent home directory to a folder of your choice\n\nTo access the file explorer and get used to where you are you can type explorer.exe .\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\nFor WSL2 users:\n\nThe home directory is /home/YourUserName\nTo access the file explorer and get used to where you are you can type explorer.exe .\nYou see that the Ubuntu environment is launched separated from your Windows environment\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\n\n\n\n\n\n\nNow that we know where we are, let’s see how to move around by first seeing what files and folders exist in our home directory. For this we can use the ls command, which stands for list directory contents:\n\nls\n\nIn my case this returns something like this:\n\n\n\nThis might look a bit different for your system in terms of color for file/folder names but what we basically see are the files (in bold text) and folders (green-highlighted text).\n\n\n\nSince this can easily become over-whelming if we deal with a lot of files and folders, lets look a bit closer into how we can optimize our commands.\nLet´s start with looking at the general structure of a command:\n\n\n\nNow, let’s look a bit closer into the ls command and use it with an option -l, an option we can use that makes ls use a long listing format.\n\nls -l\n\nAfter running this, we should see our files and folders but in what is called the long format (which gives more detailed information and structures our output a bit better):\n\n\n\nIf you are unsure what options come with a program its always a good idea to check out the manual. You can do this with:\n\nman ls\n\nYou can exit the manual by pressing q.\nIn case you want to check what a program does or what options there are, depending on the program there might be different ways how to do this. These most common ways are:\n\nman ls\nls --help\nls -h\n\n\n\n\nMost of the time you do not want to perform your analyses in the home directory but elsewhere. We can use the cd command to move around the file system.\nThe Unix file system is a hierarchical file system to organize files and directories. It is a tree-like structure that starts with a single directory called the root directory, which is denoted by a forward slash (/) character. All other files are “descendants” of root. To move from the root, we can go via the descendants to reach the john folder as follows: /users/john\n\n\n\nFor our analyses, we will move into any of the folders that we see listed after we have used ls -l. In my case I want to move into the source directory:\n\ncd source/\n\nIf you use pwd afterwards, then you should see that we moved into another directory.\nWe can also move back to our original directory using cd .., which will move the user up one directory (and move us out of the source and back into the home directory).\n\ncd ..\n\nWe can also move around multiple levels. In the example below, I am going into the source folder, then back to the home directory and then into the docs folder.\n\ncd source/../docs\n\nExercise\nExplore your current location with pwd and ls and move around with cd and try to get used to these three commands. If you are more comfortable, try finding your Deskop based on the tips in the section introducing pwd"
  },
  {
    "objectID": "source/bash_intro.html#pwd-finding-out-where-we-are",
    "href": "source/bash_intro.html#pwd-finding-out-where-we-are",
    "title": "Introduction to Bash",
    "section": "",
    "text": "After installing the terminal, let’s orient ourselves by typing our first command, pwd, into the terminal and pressing enter. pwd prints the location of the current working directory and basically tells you where exactly you are.\nWhen we login we start from what is called our home directory.\n\npwd\n\n\n\n\n\n\n\nTip: finding the desktop on different user systems\n\n\n\n\n\nYour home directory will be something like /Users/YourUserName but might be slightly different depending on your operating system. Below you find some help to orient yourself better for different terminal interfaces:\nFor MAC users:\n\nThe home directory should be /Users/YourUserName\nTo access the current folder in Finder you can try using open .\nYour desktop should be here /Users/YourUserName/Desktop\n\nFor Mobaxterm users:\n\nYour home directory is /home/mobaxterm\nBy default this home directory is in the Temp folder, which gets deleted evertime you exit Mobaxterm, To give this a persistent home, do the following:\n\nSettings –&gt; Configuration –&gt; General\nIn there set Persistent home directory to a folder of your choice\n\nTo access the file explorer and get used to where you are you can type explorer.exe .\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop\n\nFor WSL2 users:\n\nThe home directory is /home/YourUserName\nTo access the file explorer and get used to where you are you can type explorer.exe .\nYou see that the Ubuntu environment is launched separated from your Windows environment\nThe path to the desktop would be something like this /mnt/c/Users/YourUserName/OneDrive/Desktop or /mnt/c/Users/YourUserName/Desktop"
  },
  {
    "objectID": "source/bash_intro.html#ls-list-the-content-of-a-directory",
    "href": "source/bash_intro.html#ls-list-the-content-of-a-directory",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Now that we know where we are, let’s see how to move around by first seeing what files and folders exist in our home directory. For this we can use the ls command, which stands for list directory contents:\n\nls\n\nIn my case this returns something like this:\n\n\n\nThis might look a bit different for your system in terms of color for file/folder names but what we basically see are the files (in bold text) and folders (green-highlighted text)."
  },
  {
    "objectID": "source/bash_intro.html#the-structure-of-a-command",
    "href": "source/bash_intro.html#the-structure-of-a-command",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Since this can easily become over-whelming if we deal with a lot of files and folders, lets look a bit closer into how we can optimize our commands.\nLet´s start with looking at the general structure of a command:\n\n\n\nNow, let’s look a bit closer into the ls command and use it with an option -l, an option we can use that makes ls use a long listing format.\n\nls -l\n\nAfter running this, we should see our files and folders but in what is called the long format (which gives more detailed information and structures our output a bit better):\n\n\n\nIf you are unsure what options come with a program its always a good idea to check out the manual. You can do this with:\n\nman ls\n\nYou can exit the manual by pressing q.\nIn case you want to check what a program does or what options there are, depending on the program there might be different ways how to do this. These most common ways are:\n\nman ls\nls --help\nls -h"
  },
  {
    "objectID": "source/bash_intro.html#cd-moving-around-folders",
    "href": "source/bash_intro.html#cd-moving-around-folders",
    "title": "Introduction to Bash",
    "section": "",
    "text": "Most of the time you do not want to perform your analyses in the home directory but elsewhere. We can use the cd command to move around the file system.\nThe Unix file system is a hierarchical file system to organize files and directories. It is a tree-like structure that starts with a single directory called the root directory, which is denoted by a forward slash (/) character. All other files are “descendants” of root. To move from the root, we can go via the descendants to reach the john folder as follows: /users/john\n\n\n\nFor our analyses, we will move into any of the folders that we see listed after we have used ls -l. In my case I want to move into the source directory:\n\ncd source/\n\nIf you use pwd afterwards, then you should see that we moved into another directory.\nWe can also move back to our original directory using cd .., which will move the user up one directory (and move us out of the source and back into the home directory).\n\ncd ..\n\nWe can also move around multiple levels. In the example below, I am going into the source folder, then back to the home directory and then into the docs folder.\n\ncd source/../docs\n\nAnother useful way to move around quickly is using the tilde symbol, i.e. ~, which can be used as a shortcut to move directly into our home directory:\n\ncd ~\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\nExplore your current location with pwd and ls and move around with cd and try to get used to these three commands. If you are more comfortable, try finding your Deskop based on the tips in the section introducing pwd"
  }
]